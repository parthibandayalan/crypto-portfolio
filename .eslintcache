[{"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\index.js":"1","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\App.js":"2","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\reportWebVitals.js":"3","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoChart.jsx":"4","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\Chart.jsx":"5","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\LoginPage.jsx":"6","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Dashboard.jsx":"7","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\ErrorPage.jsx":"8","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\AddCoin.jsx":"9","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Snackbar.js":"10","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ConfigureStore.js":"11","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CustomizedSnackBar.jsx":"12","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\CoinDucks.js":"13","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\rootSaga.js":"14","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\CoinHandlers.js":"15","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\CoinMarketApiService.js":"16","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\requests\\CoinRequest.js":"17","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\LightChartComponent.jsx":"18","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\BinanceHistoryDataAPI.js":"19"},{"size":817,"mtime":1610022568340,"results":"20","hashOfConfig":"21"},{"size":634,"mtime":1610024660329,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":8055,"mtime":1610028430310,"results":"24","hashOfConfig":"21"},{"size":174,"mtime":1609662732825,"results":"25","hashOfConfig":"21"},{"size":5058,"mtime":1610214033827,"results":"26","hashOfConfig":"21"},{"size":6383,"mtime":1610211517428,"results":"27","hashOfConfig":"21"},{"size":105,"mtime":1609682728654,"results":"28","hashOfConfig":"21"},{"size":1824,"mtime":1610024060167,"results":"29","hashOfConfig":"21"},{"size":861,"mtime":1610127501813,"results":"30","hashOfConfig":"21"},{"size":1384,"mtime":1610023064639,"results":"31","hashOfConfig":"21"},{"size":1424,"mtime":1610025246329,"results":"32","hashOfConfig":"21"},{"size":791,"mtime":1610127490029,"results":"33","hashOfConfig":"21"},{"size":251,"mtime":1609867711375,"results":"34","hashOfConfig":"21"},{"size":1221,"mtime":1610185388110,"results":"35","hashOfConfig":"21"},{"size":607,"mtime":1610034343957,"results":"36","hashOfConfig":"21"},{"size":2801,"mtime":1610185375904,"results":"37","hashOfConfig":"21"},{"size":3444,"mtime":1610208035507,"results":"38","hashOfConfig":"21"},{"size":713,"mtime":1610203966545,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1kddrym",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"42"},"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\index.js",[],["88","89"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\App.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\reportWebVitals.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoChart.jsx",["90"],"import React, { Component } from \"react\";\r\nimport Chart from \"./Chart\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport { compose } from \"recompose\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst styles = (theme) => ({\r\n  \"chart-container\": {\r\n    height: 400,\r\n    width: 900,\r\n  },\r\n});\r\n\r\nclass CryptoChart extends Component {\r\n  /*constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pairing: this.props.location.state.coinCode + \"-USD\",\r\n      lineChartData: {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            type: \"line\",\r\n            label: this.props.location.state.coinCode + \"-USD\",\r\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n            borderColor: this.props.theme.palette.primary.main,\r\n            pointBackgroundColor: this.props.theme.palette.secondary.main,\r\n            pointBorderColor: this.props.theme.palette.secondary.main,\r\n            borderWidth: \"2\",\r\n            lineTension: 0.45,\r\n            data: [],\r\n          },\r\n        ],\r\n      },\r\n      lineChartOptions: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n          enabled: true,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 10,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n  }*/\r\n\r\n  state = {\r\n    pairing: this.props.location.state.coinCode + \"-USD\",\r\n    lineChartData: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          type: \"line\",\r\n          label: this.props.location.state.coinCode + \"-USD\",\r\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n          borderColor: this.props.theme.palette.primary.main,\r\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\r\n          pointBorderColor: this.props.theme.palette.secondary.main,\r\n          borderWidth: \"2\",\r\n          lineTension: 0.45,\r\n          data: [],\r\n        },\r\n      ],\r\n    },\r\n    lineChartOptions: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      tooltips: {\r\n        enabled: true,\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            ticks: {\r\n              autoSkip: true,\r\n              maxTicksLimit: 10,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"Rerender happend\");\r\n    this.ws = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\r\n    //this.createGDXSocket(this.props.location.state.coinCode);\r\n\r\n    const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n    const newBtcDataSet = { ...oldBtcDataSet };\r\n    newBtcDataSet.label = this.props.location.state.coinCode + \"-USD\";\r\n    const newChartData = {\r\n      ...this.state.lineChartData,\r\n      datasets: [newBtcDataSet],\r\n    };\r\n    console.log(\r\n      \"Inside Mounting Function : \" +\r\n        this.props.location.state.coinCode +\r\n        \"-USD\"\r\n    );\r\n\r\n    this.setState({\r\n      pairing: this.props.location.state.coinCode + \"-USD\",\r\n      lineChartData: newChartData,\r\n    });\r\n\r\n    const subscribe = {\r\n      type: \"subscribe\",\r\n      channels: [\r\n        {\r\n          name: \"ticker\",\r\n          product_ids: [this.state.pairing],\r\n        },\r\n      ],\r\n    };\r\n\r\n    this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };\r\n\r\n    //below code is replaced by a call to sendmessage function\r\n    /*this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };*/\r\n\r\n    this.ws.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n      console.log(\"value : \" + JSON.stringify(value));\r\n      if (value.type !== \"ticker\" || value.product_id !== this.state.pairing) {\r\n        return;\r\n      }\r\n      //console.log(\"value : \" + JSON.stringify(value));\r\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n      const newBtcDataSet = { ...oldBtcDataSet };\r\n      newBtcDataSet.data.push(value.price);\r\n      const newChartData = {\r\n        ...this.state.lineChartData,\r\n        datasets: [newBtcDataSet],\r\n        labels: this.state.lineChartData.labels.concat(\r\n          new Date().toLocaleTimeString()\r\n        ),\r\n      };\r\n      this.setState({ lineChartData: newChartData });\r\n    };\r\n  }\r\n\r\n  /*sendMessage = (msg) => {\r\n    // Wait until the state of the socket is not ready and send the message when it is...\r\n    waitForSocketConnection(function () {\r\n      this.ws.send(JSON.stringify(msg));\r\n      console.log(\" subscribe send : \" + JSON.stringify(msg));\r\n    });\r\n  };\r\n\r\n  // Make the function wait until the connection is made...\r\n  waitForSocketConnection = (callback) => {\r\n    setTimeout(function () {\r\n      if (this.ws.readyState === 1) {\r\n        console.log(\"Connection is made\");\r\n        if (callback != null) {\r\n          callback();\r\n        }\r\n      } else {\r\n        console.log(\"wait for connection...\");\r\n        waitForSocketConnection(callback);\r\n      }\r\n    }, 5); // wait 5 milisecond for the connection...\r\n  };*/\r\n\r\n  createGDXSocket(coinCode) {\r\n    const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n    const newBtcDataSet = { ...oldBtcDataSet };\r\n    newBtcDataSet.data = [];\r\n    newBtcDataSet.label = this.props.location.state.coinCode + \"-USD\";\r\n    const newChartData = {\r\n      ...this.state.lineChartData,\r\n      datasets: [newBtcDataSet],\r\n      labels: [],\r\n    };\r\n    console.log(\r\n      \"Inside GDX Socket Function : \" +\r\n        this.props.location.state.coinCode +\r\n        \"-USD\"\r\n    );\r\n    console.log(\"Check 1\");\r\n    this.setState({ pairing: this.props.location.state.coinCode + \"-USD\" });\r\n    this.setState({ lineChartData: newChartData });\r\n    console.log(\"Check 2\");\r\n    const subscribe = {\r\n      type: \"subscribe\",\r\n      channels: [\r\n        {\r\n          name: \"ticker\",\r\n          product_ids: [this.props.location.state.coinCode + \"-USD\"],\r\n        },\r\n      ],\r\n    };\r\n\r\n    if (this.ws.readyState === 1) {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    }\r\n\r\n    //below code is replaced by a call to sendmessage function\r\n    /*this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };\r\n\r\n    this.ws.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n      if (value.type !== \"ticker\") {\r\n        return;\r\n      }\r\n\r\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n      const newBtcDataSet = { ...oldBtcDataSet };\r\n      newBtcDataSet.data.push(value.price);\r\n      const newChartData = {\r\n        ...this.state.lineChartData,\r\n        datasets: [newBtcDataSet],\r\n        labels: this.state.lineChartData.labels.concat(\r\n          new Date().toLocaleTimeString()\r\n        ),\r\n      };\r\n      this.setState({ lineChartData: newChartData });\r\n    };*/\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    let newPairing = this.props.location.state.coinCode + \"-USD\";\r\n    let prevPairing = prevProps.location.state.coinCode + \"-USD\";\r\n    if (newPairing.localeCompare(prevPairing) != 0) {\r\n      //this.forceUpdate();\r\n      console.log(\"New State : \" + newPairing);\r\n      console.log(\"Previous State : \" + prevPairing);\r\n      console.log(\"Component updates\");\r\n      this.createGDXSocket(this.props.location.state.coinCode);\r\n      //this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.ws.close();\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <Card className={classes[\"chart-container\"]}>\r\n        <Chart\r\n          data={this.state.lineChartData}\r\n          options={this.state.lineChartOptions}\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  withStyles(styles, { withTheme: true })\r\n)(CryptoChart);\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\Chart.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\LoginPage.jsx",["91","92","93","94","95","96","97","98","99","100"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Dashboard.jsx",["101","102","103","104","105","106","107","108"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  AppBar,\r\n  IconButton,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Divider,\r\n  ListItemText,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\nimport { useHistory, Switch } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CryptoChart from \"../components/CryptoChart\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AddCoin from \"./../components/AddCoin\";\r\nimport LightChart from \"./../components/LightChartComponent\";\r\n\r\nconst drawerWidth = 240;\r\nconst appBarHeight = 64;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    height: \"calc(100% - 64px)\",\r\n    top: 64,\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  contentIn: {\r\n    marginTop: appBarHeight,\r\n  },\r\n  content: {\r\n    marginTop: appBarHeight,\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    marginLeft: drawerWidth,\r\n  },\r\n  blockBox: {\r\n    display: \"block\",\r\n  },\r\n  inlineBlockBox: { display: \"inline-block\" },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function Dashboard({ match }) {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n\r\n  const [items, setItems] = useState([]);\r\n  const coins = useSelector((state) => state.coins.coins);\r\n\r\n  const [isLoggedIn, setLogged] = useState(true);\r\n\r\n  const itemsList = [\r\n    {\r\n      text: \"ETH-USD\",\r\n      onClick: () =>\r\n        history.push({\r\n          pathname: \"/lightchart\",\r\n          state: { coinCode: \"ETH\" },\r\n        }),\r\n    },\r\n  ];\r\n\r\n  for (const [key, value] of Object.entries(coins)) {\r\n    let eachItem = {\r\n      text: key + \"-USD\",\r\n      onClick: () =>\r\n        history.push({\r\n          pathname: \"/lightchart\",\r\n          state: { coinCode: key },\r\n        }),\r\n    };\r\n    itemsList.push(eachItem);\r\n  }\r\n\r\n  const handleLogout = () => {};\r\n\r\n  return (\r\n    <div>\r\n      <Box className={classes.blockBox}>\r\n        <Box className={classes.blockBox}>\r\n          <AppBar position=\"fixed\" className={classes.appBar}>\r\n            <Toolbar>\r\n              <Typography variant=\"h6\" className={classes.title} align=\"center\">\r\n                Crypto Portfolio\r\n              </Typography>\r\n              {isLoggedIn && (\r\n                <Button color=\"inherit\" onClick={handleLogout}>\r\n                  Log Out\r\n                </Button>\r\n              )}\r\n              {!isLoggedIn && (\r\n                <Button color=\"inherit\" onClick={handleLogout}>\r\n                  Log In\r\n                </Button>\r\n              )}\r\n            </Toolbar>\r\n          </AppBar>\r\n        </Box>\r\n        <Box className={classes.blockBox}>\r\n          <Box className={classes.inlineBox}>\r\n            <Drawer\r\n              variant=\"permanent\"\r\n              className={classes.drawer}\r\n              classes={{ paper: classes.drawerPaper }}\r\n            >\r\n              <div className={classes.drawerHeader}>\r\n                {/*<IconButton>\r\n                  <MonetizationOnIcon />\r\n                </IconButton>*/}\r\n              </div>\r\n              <Divider />\r\n              <List>\r\n                {itemsList.map((item, index) => {\r\n                  const { text, icon, onClick } = item;\r\n                  return (\r\n                    <ListItem button key={text} onClick={onClick}>\r\n                      <ListItemIcon>\r\n                        <MonetizationOnIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary={text} />\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n              </List>\r\n              <Divider />\r\n              <ListItem\r\n                button\r\n                key=\"addcoin\"\r\n                onClick={() => history.push(\"/addcoin\")}\r\n              >\r\n                <ListItemIcon>\r\n                  <MonetizationOnIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Add Coin\" />\r\n              </ListItem>\r\n              <Divider />\r\n              <ListItem\r\n                button\r\n                key=\"lightchart\"\r\n                onClick={() =>\r\n                  history.push({\r\n                    pathname: \"/lightchart\",\r\n                    state: { coinCode: \"ETH\" },\r\n                  })\r\n                }\r\n              >\r\n                <ListItemIcon>\r\n                  <MonetizationOnIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Light Chart\" />\r\n              </ListItem>\r\n            </Drawer>\r\n          </Box>\r\n          <Box className={classes.content}>\r\n            <Switch>\r\n              <Route exact path={match.url + `chart`} component={CryptoChart}>\r\n                <CryptoChart />\r\n              </Route>\r\n              <Route\r\n                exact\r\n                path={match.url + `lightchart`}\r\n                component={LightChart}\r\n              >\r\n                <LightChart />\r\n              </Route>\r\n              <Route exact path={match.url + `addcoin`} component={AddCoin}>\r\n                <AddCoin />\r\n              </Route>\r\n            </Switch>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\ErrorPage.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\AddCoin.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Snackbar.js",["109"],"export const SET_SNACKBAR = \"SET_SNACKBAR\";\r\n\r\nconst initialState = {\r\n  snackbarOpen: false,\r\n  snackbarType: \"success\",\r\n  snackbarMessage: \"\",\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_SNACKBAR:\r\n      const { snackbarOpen, snackbarMessage, snackbarType } = action;\r\n      /*console.log(\r\n        \"SET SNACKBAR Reducer\" +\r\n          snackbarOpen +\r\n          \" \" +\r\n          snackbarMessage +\r\n          \" \" +\r\n          snackbarType\r\n      );*/\r\n      return {\r\n        ...state,\r\n        snackbarOpen,\r\n        snackbarType,\r\n        snackbarMessage,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setSnackbar = (\r\n  snackbarOpen,\r\n  snackbarType = \"success\",\r\n  snackbarMessage = \"\"\r\n) => ({\r\n  type: SET_SNACKBAR,\r\n  snackbarOpen,\r\n  snackbarType,\r\n  snackbarMessage,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ConfigureStore.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CustomizedSnackBar.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\CoinDucks.js",["110"],"export const CHECK_COIN = \"CHECK_COIN\";\r\nconst ADD_COIN = \"ADD_COIN\";\r\n\r\nconst initialState = {\r\n  coins: {},\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_COIN:\r\n      let { symbol, token } = action;\r\n      //console.log(\"ADD COIN Reducer \" + symbol + \" \" + token);\r\n      if (symbol in state.coins) {\r\n        token = Number(token) + Number(state.coins[symbol]);\r\n      }\r\n      return {\r\n        ...state,\r\n        coins: {\r\n          ...state.coins,\r\n          [symbol]: token,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const checkCoin = (symbol, token) => ({\r\n  type: CHECK_COIN,\r\n  symbol,\r\n  token,\r\n});\r\n\r\nexport const addCoin = (symbol, token) => ({\r\n  type: ADD_COIN,\r\n  symbol,\r\n  token,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\rootSaga.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\CoinHandlers.js",["111","112","113"],"import { setSnackbar } from \"../../ducks/Snackbar\";\r\nimport { addCoin } from \"../../ducks/CoinDucks\";\r\nimport { call, put } from \"redux-saga/effects\";\r\nimport { checkSymbol } from \"../../../services/CoinMarketApiService\";\r\nimport checkSymbolBinanceApi from \"../requests/CoinRequest\";\r\nimport getHistoricalData from \"../../../services/BinanceHistoryDataAPI\";\r\n\r\nexport function* handleCheckCoin(action) {\r\n  //yield put(setSnackbar(true, \"success\", \"Your coin is added\"));\r\n  try {\r\n    console.log(\"Check Coin caught\" + JSON.stringify(action));\r\n    const { symbol, token } = action;\r\n    console.log(\r\n      \"Symbol : \" + JSON.stringify(symbol) + \" Token \" + JSON.stringify(token)\r\n    );\r\n    if (isNaN(token) || Number(token) < 0) {\r\n      throw \"Enter Valid Number\";\r\n    }\r\n    //const response = yield call(checkSymbol, symbol);\r\n    //yield call(checkSymbolBinanceApi, symbol);\r\n    yield call(getHistoricalData, symbol);\r\n    //console.log(\"Response : \" + JSON.stringify(response));\r\n    yield put(addCoin(symbol, token));\r\n    yield put(setSnackbar(true, \"success\", \"Your coin is added\"));\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(setSnackbar(true, \"error\", JSON.stringify(error)));\r\n  }\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\CoinMarketApiService.js",["114","115"],"import axios from \"axios\";\r\nconst API_URL = \"https://pro-api.coinmarketcap.com/v1/cryptocurrency/info\";\r\n\r\nexport function checkSymbol(strSymbol) {\r\n  return axios\r\n    .get(`https://pro-api.coinmarketcap.com/v1/cryptocurrency/info`, {\r\n      headers: {\r\n        \"X-CMC_PRO_API_KEY\": \"554d8fe4-3311-4db0-8dfa-7d243d1e1de6\",\r\n      },\r\n      params: { symbol: strSymbol },\r\n    })\r\n    .then((res) => {\r\n      return res.data;\r\n      /*console.log(res.data);\r\n      const responseTodos = res.data;\r\n      setData(responseTodos);*/\r\n    })\r\n    .catch((error) => {\r\n      throw \"Invalid Symbol\";\r\n    });\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\requests\\CoinRequest.js",["116","117"],"import { CoinbasePro } from \"coinbase-pro-node\";\r\nimport Binance from \"node-binance-api\";\r\n\r\n/*export default async function checkSymbolBinanceApi(symbol) {\r\n  const pairing = symbol + \"USDT\";\r\n\r\n  try {\r\n    let ticker = await binance.prices(pairing);\r\n    console.info(\"Price of BTC : \", ticker[pairing]);\r\n  } catch (error) {\r\n    throw \"Coin not supported\";\r\n  }\r\n  //    (error, ticker) => {\r\n  //     try {\r\n  //       console.info(\"Price of BTC : \", ticker[pairing] + \" Error : \" + error);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //       throw \"Coin not supported\";\r\n  //     }});\r\n}\r\n\r\nexport default function checkSymbolWebSocket(symbol) {\r\n  //const {CoinbasePro} = require('coinbase-pro-node');\r\n\r\n  const auth = {\r\n    apiKey: \"c667149b215cea51d41da304fb8f70dd\",\r\n    apiSecret:\r\n      \"9/R0ZPeb6pM1Jg8CFQw7irZ+nAoec5O9LxGPY0YMFqydS1kF+7+DkK8/d05wbHrAlmxrQND4WupFYp3VOyB8Vg==\",\r\n    passphrase: \"pleasework\",\r\n    // The Sandbox is for testing only and offers a subset of the products/assets:\r\n    // https://docs.pro.coinbase.com/#sandbox\r\n    useSandbox: false,\r\n  };\r\n\r\n  const client = new CoinbasePro(auth);\r\n\r\n  client.rest.account.listAccounts().then((accounts) => {\r\n    const message = `You can trade \"${accounts.length}\" different pairs.`;\r\n    console.log(message);\r\n  });\r\n\r\n  client.rest.product\r\n    .getProducts()\r\n    .then((product) => {\r\n      console.log(JSON.stringify(product));\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Error Caught : \" + error);\r\n    });\r\n}\r\n\r\n\r\n\r\nfunction sleep(miliseconds) {\r\n  var currentTime = new Date().getTime();\r\n\r\n  while (currentTime + miliseconds >= new Date().getTime()) {\r\n    console.log(\"Timer Running\");\r\n  }\r\n}\r\n\r\nexport default async function checkSymbolWebSocket(strSymbol) {\r\n  var ws = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\r\n  const subscribe = {\r\n    type: \"subscribe\",\r\n    channels: [\r\n      {\r\n        name: \"ticker\",\r\n        product_ids: strSymbol + \"-USD\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  var subscriptionReplied = false;\r\n\r\n  ws.onopen = () => {\r\n    ws.send(JSON.stringify(subscribe));\r\n    console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n  };\r\n\r\n  ws.onmessage = (e) => {\r\n    subscriptionReplied = true;\r\n    //JSON.parse(e.data.type);\r\n    const value = JSON.parse(e.data);\r\n    console.log(\"Inside Machine\");\r\n    console.log(JSON.stringify(value));\r\n    if (value.type == \"subscriptions\") {\r\n      //ws.close();\r\n    } else if (e.data.type == \"error\") {\r\n      ws.close();\r\n      throw \"Invalid Symbol or Symbol not Supported\";\r\n    }\r\n  };\r\n\r\n  for (let i = 0; i < 10; ++i) {\r\n    if (subscriptionReplied == true) {\r\n      console.log(JSON.stringify(subscriptionReplied));\r\n      return;\r\n    }\r\n    await sleep(300);\r\n  }\r\n  throw \"Socket Issue : \";\r\n}*/\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\LightChartComponent.jsx",["118"],"import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"kaktana-react-lightweight-charts\";\r\nimport getHistoricalData from \"./../services/BinanceHistoryDataAPI\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function LightChartComponent() {\r\n  // URL connection\r\n  /*const miniTicker = new WebSocket(\r\n    \"wss://dex.binance.org/api/ws/BNB_BTCB-1D@miniTicker\"\r\n  );*/\r\n\r\n  // Or Subscribe method\r\n\r\n  const location = useLocation();\r\n\r\n  const options = {\r\n    alignLabels: true,\r\n    timeScale: {\r\n      rightOffset: 12,\r\n      barSpacing: 3,\r\n      fixLeftEdge: true,\r\n      lockVisibleTimeRangeOnResize: true,\r\n      rightBarStaysOnScroll: true,\r\n      borderVisible: false,\r\n      borderColor: \"#fff000\",\r\n      visible: true,\r\n      timeVisible: true,\r\n      secondsVisible: false,\r\n    },\r\n  };\r\n\r\n  const [lineSeries, setLineSeries] = useState([\r\n    {\r\n      data: [],\r\n    },\r\n  ]);\r\n\r\n  /////below code is for getting historical data and setting up the lineSeries data\r\n  /* {\r\n          time: \"2018-10-19\",\r\n          value: 180.34,\r\n        },\r\n        {\r\n          time: \"2018-10-22\",\r\n          value: 180.82,\r\n        },\r\n        {\r\n          time: \"2018-10-23\",\r\n          value: 175.77,\r\n        },\r\n        {\r\n          time: \"2018-10-24\",\r\n          value: 178.58,\r\n        },\r\n        {\r\n          time: \"2018-10-25\",\r\n          value: 177.52,\r\n        },\r\n        {\r\n          time: \"2018-10-26\",\r\n          value: 176.88,\r\n        },\r\n        {\r\n          time: \"2018-10-29\",\r\n          value: 173.74,\r\n        },\r\n        {\r\n          time: \"2018-10-30\",\r\n          value: 173.16,\r\n        },\r\n        {\r\n          time: \"2018-10-31\",\r\n          value: 177.98,\r\n        },\r\n        const lineSeries = [\r\n    {\r\n      data: [],\r\n    },\r\n  ];*/\r\n\r\n  useEffect(() => {\r\n    //lineSeries[0][\"data\"].push(incomingData);\r\n    // console.log(\r\n    //   lineSeries[0][\"data\"].push({ time: \"2018-11-01\", value: 180.98 })\r\n    // );\r\n    getHistoricalData(location.state.coinCode)\r\n      .then((incD) => {\r\n        //console.log(\"received by the component : \" + JSON.stringify(incD));\r\n        //setIncomingData(incD);\r\n        const oldLineData = lineSeries[0][\"data\"];\r\n        const newLineSeries = [\r\n          {\r\n            data: [...oldLineData, ...incD],\r\n          },\r\n        ];\r\n        setLineSeries(newLineSeries);\r\n        //console.log(\"received by the component : \");\r\n        //console.log(newLineSeries);\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }, [location.state.coinCode]);\r\n\r\n  //////////below code is for websocket\r\n  const API_WS =\r\n    \"wss://stream.binance.com:9443/ws/\" +\r\n    location.state.coinCode +\r\n    \"usdt@kline_10m\";\r\n  const conn = new WebSocket(API_WS);\r\n\r\n  conn.onmessage = (e) => {\r\n    console.log(\"value : \");\r\n    console.log(e.data);\r\n    var newKlineMap = JSON.parse(e.data);\r\n    const newPoint = {\r\n      time: newKlineMap.k.t / 1000,\r\n      value: parseFloat(newKlineMap.k.o),\r\n    };\r\n\r\n    //console.log(newKlineMap.k.t + \" \" + newKlineMap.k.o);\r\n    //console.log(\"Value : \" + newPoint.value);\r\n    const oldLineData = lineSeries[0][\"data\"];\r\n    const newLineSeries = [\r\n      {\r\n        data: [...oldLineData, newPoint],\r\n      },\r\n    ];\r\n    setLineSeries(newLineSeries);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Chart options={options} lineSeries={lineSeries} autoWidth height={800} />\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\BinanceHistoryDataAPI.js",["119"],"import axios from \"axios\";\r\n\r\nexport default async function getHistoricalData(symbol) {\r\n  const pairing = symbol + \"USDT\";\r\n\r\n  //https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=1000\r\n\r\n  return axios\r\n    .get(`https://api.binance.com/api/v3/klines`, {\r\n      params: { symbol: pairing, interval: \"1d\", limit: 1000 },\r\n    })\r\n    .then((res) => {\r\n      const cdata = res.data.map((d) => {\r\n        return {\r\n          time: d[0] / 1000,\r\n          value: parseFloat(d[1]),\r\n        };\r\n      });\r\n      //console.log(\"immediatly after fetching from api : \");\r\n      //console.log(cdata);\r\n      return cdata;\r\n    })\r\n    .catch((error) => {\r\n      throw \"Invalid Symbol\";\r\n    });\r\n}\r\n",{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":244,"column":47,"nodeType":"126","messageId":"127","endLine":244,"endColumn":49},{"ruleId":"128","severity":1,"message":"129","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":26},{"ruleId":"128","severity":1,"message":"132","line":1,"column":28,"nodeType":"130","messageId":"131","endLine":1,"endColumn":37},{"ruleId":"128","severity":1,"message":"133","line":3,"column":23,"nodeType":"130","messageId":"131","endLine":3,"endColumn":34},{"ruleId":"128","severity":1,"message":"134","line":6,"column":3,"nodeType":"130","messageId":"131","endLine":6,"endColumn":7},{"ruleId":"128","severity":1,"message":"135","line":7,"column":3,"nodeType":"130","messageId":"131","endLine":7,"endColumn":14},{"ruleId":"128","severity":1,"message":"136","line":8,"column":3,"nodeType":"130","messageId":"131","endLine":8,"endColumn":12},{"ruleId":"128","severity":1,"message":"137","line":12,"column":3,"nodeType":"130","messageId":"131","endLine":12,"endColumn":11},{"ruleId":"128","severity":1,"message":"138","line":38,"column":9,"nodeType":"130","messageId":"131","endLine":38,"endColumn":16},{"ruleId":"128","severity":1,"message":"139","line":40,"column":9,"nodeType":"130","messageId":"131","endLine":40,"endColumn":17},{"ruleId":"128","severity":1,"message":"140","line":77,"column":15,"nodeType":"130","messageId":"131","endLine":77,"endColumn":27},{"ruleId":"128","severity":1,"message":"141","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":12},{"ruleId":"128","severity":1,"message":"142","line":6,"column":3,"nodeType":"130","messageId":"131","endLine":6,"endColumn":13},{"ruleId":"128","severity":1,"message":"143","line":20,"column":10,"nodeType":"130","messageId":"131","endLine":20,"endColumn":21},{"ruleId":"128","severity":1,"message":"144","line":99,"column":10,"nodeType":"130","messageId":"131","endLine":99,"endColumn":15},{"ruleId":"128","severity":1,"message":"145","line":99,"column":17,"nodeType":"130","messageId":"131","endLine":99,"endColumn":25},{"ruleId":"128","severity":1,"message":"146","line":102,"column":22,"nodeType":"130","messageId":"131","endLine":102,"endColumn":31},{"ruleId":"128","severity":1,"message":"147","line":115,"column":20,"nodeType":"130","messageId":"131","endLine":115,"endColumn":25},{"ruleId":"128","severity":1,"message":"148","line":166,"column":33,"nodeType":"130","messageId":"131","endLine":166,"endColumn":37},{"ruleId":"149","severity":1,"message":"150","line":9,"column":1,"nodeType":"151","endLine":30,"endColumn":3},{"ruleId":"149","severity":1,"message":"150","line":8,"column":1,"nodeType":"151","endLine":26,"endColumn":3},{"ruleId":"128","severity":1,"message":"152","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":21},{"ruleId":"128","severity":1,"message":"153","line":5,"column":8,"nodeType":"130","messageId":"131","endLine":5,"endColumn":29},{"ruleId":"154","severity":1,"message":"155","line":17,"column":7,"nodeType":"156","messageId":"157","endLine":17,"endColumn":34},{"ruleId":"128","severity":1,"message":"158","line":2,"column":7,"nodeType":"130","messageId":"131","endLine":2,"endColumn":14},{"ruleId":"154","severity":1,"message":"155","line":19,"column":7,"nodeType":"156","messageId":"157","endLine":19,"endColumn":30},{"ruleId":"128","severity":1,"message":"159","line":1,"column":10,"nodeType":"130","messageId":"131","endLine":1,"endColumn":21},{"ruleId":"128","severity":1,"message":"160","line":2,"column":8,"nodeType":"130","messageId":"131","endLine":2,"endColumn":15},{"ruleId":"161","severity":1,"message":"162","line":103,"column":6,"nodeType":"163","endLine":103,"endColumn":31,"suggestions":"164"},{"ruleId":"154","severity":1,"message":"155","line":24,"column":7,"nodeType":"156","messageId":"157","endLine":24,"endColumn":30},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useSelector' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'FormGroup' is defined but never used.","'MenuItem' is defined but never used.","'history' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'errorVisible' is assigned a value but never used.","'clsx' is defined but never used.","'IconButton' is defined but never used.","'useDispatch' is defined but never used.","'items' is assigned a value but never used.","'setItems' is assigned a value but never used.","'setLogged' is assigned a value but never used.","'value' is assigned a value but never used.","'icon' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'checkSymbol' is defined but never used.","'checkSymbolBinanceApi' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'API_URL' is assigned a value but never used.","'CoinbasePro' is defined but never used.","'Binance' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lineSeries'. Either include it or remove the dependency array.","ArrayExpression",["167"],"no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},"Update the dependencies array to be: [lineSeries, location.state.coinCode]",{"range":"170","text":"171"},[2548,2573],"[lineSeries, location.state.coinCode]"]