[{"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\index.js":"1","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\App.js":"2","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\reportWebVitals.js":"3","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ConfigureStore.js":"4","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Authentication.js":"5","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Snackbar.js":"6","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\CoinDucks.js":"7","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\rootSaga.js":"8","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\ErrorPage.jsx":"9","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CustomizedSnackBar.jsx":"10","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\LoginPage.jsx":"11","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Dashboard.jsx":"12","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\CoinHandlers.js":"13","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\Authentication.js":"14","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\AddCoin.jsx":"15","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\PortfolioCards.jsx":"16","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\PortfolioServices.js":"17","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\requests\\Authentication.js":"18","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\Chart.jsx":"19","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoCard.jsx":"20","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Trigger.js":"21","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\TotalValueDucks.js":"22","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\TotalPortfolioValue.jsx":"23","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\RealTimeChart.jsx":"24","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Registration.jsx":"25","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\IdleTimerComponent.jsx":"26","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\IdleTimerDialog.jsx":"27","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\deleted\\CryptoChart.jsx":"28","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\CryptoAPIService.js":"29","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\deleted\\LoginPage.jsx":"30"},{"size":956,"mtime":1624634088948,"results":"31","hashOfConfig":"32"},{"size":1102,"mtime":1624644519331,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":499162500000,"results":"34","hashOfConfig":"32"},{"size":1615,"mtime":1611938428249,"results":"35","hashOfConfig":"32"},{"size":902,"mtime":1610733371110,"results":"36","hashOfConfig":"32"},{"size":861,"mtime":1610127501813,"results":"37","hashOfConfig":"32"},{"size":1351,"mtime":1624559412358,"results":"38","hashOfConfig":"32"},{"size":711,"mtime":1612422743411,"results":"39","hashOfConfig":"32"},{"size":105,"mtime":1609682728654,"results":"40","hashOfConfig":"32"},{"size":1424,"mtime":1610025246329,"results":"41","hashOfConfig":"32"},{"size":7290,"mtime":1624819477830,"results":"42","hashOfConfig":"32"},{"size":8163,"mtime":1624635078324,"results":"43","hashOfConfig":"32"},{"size":3190,"mtime":1624559270305,"results":"44","hashOfConfig":"32"},{"size":3078,"mtime":1624819614419,"results":"45","hashOfConfig":"32"},{"size":2208,"mtime":1624605215563,"results":"46","hashOfConfig":"32"},{"size":1411,"mtime":1624629411012,"results":"47","hashOfConfig":"32"},{"size":1987,"mtime":1624714244468,"results":"48","hashOfConfig":"32"},{"size":1941,"mtime":1611671385542,"results":"49","hashOfConfig":"32"},{"size":174,"mtime":1609662732825,"results":"50","hashOfConfig":"32"},{"size":2629,"mtime":1624629357859,"results":"51","hashOfConfig":"32"},{"size":559,"mtime":1611925655923,"results":"52","hashOfConfig":"32"},{"size":1058,"mtime":1611938631370,"results":"53","hashOfConfig":"32"},{"size":1433,"mtime":1612693937330,"results":"54","hashOfConfig":"32"},{"size":5576,"mtime":1624634753566,"results":"55","hashOfConfig":"32"},{"size":6985,"mtime":1624883287585,"results":"56","hashOfConfig":"32"},{"size":2257,"mtime":1612621163364,"results":"57","hashOfConfig":"32"},{"size":2256,"mtime":1624821547043,"results":"58","hashOfConfig":"32"},{"size":8067,"mtime":1624468854667,"results":"59","hashOfConfig":"32"},{"size":1356,"mtime":1624556774195,"results":"60","hashOfConfig":"32"},{"size":4996,"mtime":1624644441573,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"16a2n06",{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"64"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"64"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\index.js",[],["141","142"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\App.js",["143"],"import \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport Registration from \"./pages/Registration\";\nimport ErrorPage from \"./pages/ErrorPage\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Snackbar from \"./components/CustomizedSnackBar\";\nimport IdleTimerDialog from \"./components/IdleTimerDialog\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(() => ({\n  timerClass: {\n    zIndex: 10,\n    postion: \"absolute\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const API_URL = process.env.REACT_APP_API_URL;\n  console.log(API_URL);\n  return (\n    <div className=\"App\">\n      <Snackbar />\n      <IdleTimerDialog />\n      <Router>\n        <Switch>\n          <Route exact path=\"/login\" component={LoginPage} />\n          <Route exact path=\"/register\" component={Registration} />\n          <Route exact path=\"/error\" component={ErrorPage} />\n          <Route path=\"/\" component={Dashboard} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\reportWebVitals.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ConfigureStore.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Authentication.js",["144"],"export const LOGIN_USER = \"LOGIN_USER\";\r\nexport const LOGOUT_USER = \"LOGOUT_USER\";\r\nexport const REFRESH_TOKEN = \"REFRESH_TOKEN\";\r\nconst SET_AUTHENTICATED = \"SET_AUTHENTICATED\";\r\n\r\nexport const loginUser = (data) => ({\r\n  type: LOGIN_USER,\r\n  payload: data,\r\n});\r\n\r\nexport const logoutUser = () => ({\r\n  type: LOGOUT_USER,\r\n});\r\n\r\nexport const refreshToken = () => ({\r\n  type: REFRESH_TOKEN,\r\n});\r\n\r\nexport const setAuthenticated = (authenticated, username, name) => ({\r\n  type: SET_AUTHENTICATED,\r\n  authenticated,\r\n  username,\r\n  name,\r\n});\r\n\r\nconst initialState = {\r\n  authenticated: false,\r\n  username: null,\r\n  name: null,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_AUTHENTICATED:\r\n      const { authenticated, username, name } = action;\r\n      return { ...state, authenticated, username, name };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Snackbar.js",["145"],"export const SET_SNACKBAR = \"SET_SNACKBAR\";\r\n\r\nconst initialState = {\r\n  snackbarOpen: false,\r\n  snackbarType: \"success\",\r\n  snackbarMessage: \"\",\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_SNACKBAR:\r\n      const { snackbarOpen, snackbarMessage, snackbarType } = action;\r\n      /*console.log(\r\n        \"SET SNACKBAR Reducer\" +\r\n          snackbarOpen +\r\n          \" \" +\r\n          snackbarMessage +\r\n          \" \" +\r\n          snackbarType\r\n      );*/\r\n      return {\r\n        ...state,\r\n        snackbarOpen,\r\n        snackbarType,\r\n        snackbarMessage,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setSnackbar = (\r\n  snackbarOpen,\r\n  snackbarType = \"success\",\r\n  snackbarMessage = \"\"\r\n) => ({\r\n  type: SET_SNACKBAR,\r\n  snackbarOpen,\r\n  snackbarType,\r\n  snackbarMessage,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\CoinDucks.js",["146","147"],"export const CHECK_COIN = \"CHECK_COIN\";\r\nexport const REMOVE_COIN_REQ = \"REMOVE_COIN_REQ\";\r\nconst ADD_COIN = \"ADD_COIN\";\r\nconst REMOVE_COIN = \"REMOVE_COIN\";\r\nconst RESET_COIN = \"RESET_COIN\";\r\n\r\nconst intialState = {\r\n  coins: {},\r\n};\r\n\r\nexport default (state = intialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_COIN:\r\n      let { symbol, token, id, image } = action;\r\n      //console.log(\"ADD COIN Reducer \" + symbol + \" \" + token);\r\n      //const newMap = state.coins.set(symbol, token);\r\n      var newState = {\r\n        coins: { ...state.coins },\r\n      };\r\n      newState.coins[symbol] = { token, id, image };\r\n      return newState;\r\n    case REMOVE_COIN:\r\n      delete state.coins[action.symbol];\r\n      var newState = {\r\n        coins: { ...state.coins },\r\n      };\r\n      return newState;\r\n    case RESET_COIN:\r\n      return intialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const checkCoin = (id, token) => ({\r\n  type: CHECK_COIN,\r\n  id,\r\n  token,\r\n});\r\n\r\nexport const addCoin = (symbol, token, id, image) => ({\r\n  type: ADD_COIN,\r\n  symbol,\r\n  token,\r\n  id,\r\n  image,\r\n});\r\n\r\nexport const removeCoin = (symbol) => ({\r\n  type: REMOVE_COIN,\r\n  symbol,\r\n});\r\n\r\nexport const removeCoinReq = (symbol) => ({\r\n  type: REMOVE_COIN_REQ,\r\n  symbol,\r\n});\r\n\r\nexport const resetCoins = () => ({\r\n  type: RESET_COIN,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\rootSaga.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\ErrorPage.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CustomizedSnackBar.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\LoginPage.jsx",["148","149"],"import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginUser } from \"../redux/ducks/Authentication\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  TextField,\r\n  Box,\r\n  Button,\r\n  makeStyles,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport { ErrorMessage, Form, Formik, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { LockRounded, AccountCircle } from \"@material-ui/icons\";\r\n\r\nconst initialValues = {\r\n  username: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  loginPaper: {},\r\n  buttonBlock: {\r\n    width: \"90%\",\r\n    margin: \"auto auto\",\r\n    display: \"block\",\r\n  },\r\n});\r\n\r\nexport default function LoginPage() {\r\n  let errorVisible = false;\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector((state) => state.auth.authenticated);\r\n\r\n  useEffect(() => {\r\n    console.log(\"use effect : \" + auth);\r\n    if (auth) history.push(\"/\");\r\n    else {\r\n      errorVisible = true;\r\n      console.log(\"value changed: \" + errorVisible);\r\n    }\r\n  }, [auth]);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container style={{ minHeight: \"100vh\" }}>\r\n        <Grid item xs={12} sm={6}>\r\n          <img\r\n            src=\"https://cdn-japantimes.com/wp-content/uploads/2018/01/z2-crypto-a-20180123.jpg\"\r\n            style={{ width: \"100%\", height: \"100%\" }}\r\n            alt=\"opening image\"\r\n          />\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          item\r\n          xs={12}\r\n          sm={6}\r\n          style={{ padding: 10 }}\r\n          alignItems=\"center\"\r\n          direction=\"column\"\r\n          justify=\"space-between\"\r\n        >\r\n          <div></div>\r\n          <div style={{ width: 250 }}>\r\n            <Grid container justify=\"center\">\r\n              <img\r\n                src={process.env.PUBLIC_URL + \"/assets/crypto.png\"}\r\n                width={200}\r\n                alt=\"logo\"\r\n              />\r\n            </Grid>\r\n            <div style={{ height: 20 }}></div>\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={Yup.object().shape({\r\n                username: Yup.string().required(\"Username is required\"),\r\n                password: Yup.string().required(\"Password is required\"),\r\n              })}\r\n              onSubmit={(values, formikHelpers) => {\r\n                // console.log(\"Submition Done\");\r\n                // console.log(values);\r\n                dispatch(loginUser(values));\r\n                //dispatch(loginUser(values));\r\n                // errorVisible = true;\r\n                // console.log(\"dispatch done outside :\" + auth);\r\n              }}\r\n            >\r\n              {({ values, errors, isSubmitting, isValidating }) => (\r\n                <div\r\n                  style={{\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <Grid item>\r\n                    <Typography component=\"h1\" variant=\"h6\">\r\n                      Crypto-Portfolio Tracker\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography component=\"h1\" variant=\"h6\">\r\n                      Sign in\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    spacing={3}\r\n                  >\r\n                    <Form>\r\n                      <Grid item>\r\n                        <Field\r\n                          required\r\n                          name=\"username\"\r\n                          type=\"string\"\r\n                          as={TextField}\r\n                          label=\"Username\"\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <InputAdornment position=\"start\">\r\n                                <AccountCircle />\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <ErrorMessage name=\"username\" />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Field\r\n                          required\r\n                          name=\"password\"\r\n                          type=\"password\"\r\n                          as={TextField}\r\n                          label=\"Password\"\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <InputAdornment position=\"start\">\r\n                                <LockRounded />\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <ErrorMessage name=\"password\" />\r\n                      </Grid>\r\n                      <div style={{ height: 20 }}></div>\r\n                      <Grid item>\r\n                        <Box marginBottom={2}>\r\n                          <Button\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            type=\"submit\"\r\n                            disabled={isSubmitting || isValidating}\r\n                            className={classes.buttonBlock}\r\n                          >\r\n                            Submit\r\n                          </Button>\r\n                        </Box>\r\n                      </Grid>\r\n                      <div style={{ height: 5 }}></div>\r\n                      <Grid item>\r\n                        <Box>\r\n                          <Button\r\n                            color=\"default\"\r\n                            type=\"submit\"\r\n                            onClick={() => history.push(\"/register\")}\r\n                            className={classes.buttonBlock}\r\n                          >\r\n                            Register\r\n                          </Button>\r\n                        </Box>\r\n                      </Grid>\r\n                      <div style={{ height: 5 }}></div>\r\n                    </Form>\r\n                    <Grid item>\r\n                      <Box>\r\n                        <Button\r\n                          color=\"default\"\r\n                          type=\"submit\"\r\n                          onClick={() => {\r\n                            dispatch(\r\n                              loginUser({\r\n                                username: \"testuserjune27\",\r\n                                password: \"Password01!\",\r\n                              })\r\n                            );\r\n                          }}\r\n                          className={classes.buttonBlock}\r\n                        >\r\n                          Demo Login\r\n                        </Button>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n          <div></div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Dashboard.jsx",["150","151","152","153","154"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Divider,\r\n  ListItemText,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\nimport { useHistory, Switch } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AddCoin from \"./../components/AddCoin\";\r\n\r\nimport { logoutUser } from \"../redux/ducks/Authentication\";\r\nimport RealTimeChart from \"../components/RealTimeChart\";\r\n\r\nimport PortfolioCards from \"../components/PortfolioCards\";\r\nimport { resetTrigger } from \"../redux/ducks/Trigger\";\r\n\r\nconst drawerWidth = 240;\r\nconst appBarHeight = 64;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  toolbar: {},\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    height: \"calc(100% - 64px)\",\r\n    top: 64,\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  box1: {\r\n    flexGrow: 1,\r\n    textAlign: \"left\",\r\n  },\r\n  box2: {\r\n    flexGrow: 1,\r\n  },\r\n  box3: {\r\n    flexGrow: 1,\r\n    textAlign: \"right\",\r\n  },\r\n  contentIn: {\r\n    marginTop: appBarHeight,\r\n  },\r\n  content: {\r\n    marginTop: appBarHeight,\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    marginLeft: drawerWidth,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  blockBox: {\r\n    display: \"block\",\r\n  },\r\n  inlineBlockBox: { display: \"inline-block\" },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function Dashboard({ match }) {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n\r\n  const [items, setItems] = useState([]);\r\n  const coins = useSelector((state) => state.coins.coins);\r\n  const reload = useSelector((state) => state.trigger.boolTrigger);\r\n\r\n  const nameofUser = useSelector((state) => state.auth.name);\r\n  const username = useSelector((state) => state.auth.username);\r\n\r\n  console.log(process.env.REACT_APP_API_URL);\r\n\r\n  const isLoggedIn = useSelector((state) => state.auth.authenticated);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    var itemsList = [];\r\n    for (const [key, value] of Object.entries(coins)) {\r\n      console.log(value.token);\r\n      let eachItem = {\r\n        text: key + \"-USD\",\r\n        id: value.id,\r\n        image: value.image,\r\n        onClick: () => {\r\n          return history.push({\r\n            pathname: \"/lightchart\",\r\n            state: { coinCode: key, value },\r\n          });\r\n        },\r\n      };\r\n      itemsList.push(eachItem);\r\n    }\r\n    setItems(itemsList);\r\n    dispatch(resetTrigger());\r\n  }, [reload]);\r\n\r\n  const handleLogout = () => {\r\n    dispatch(logoutUser());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Box className={classes.blockBox}>\r\n        <Box className={classes.blockBox}>\r\n          <AppBar position=\"fixed\" className={classes.appBar}>\r\n            <Toolbar className={classes.toolbar}>\r\n              <Box className={classes.box1}>\r\n                {isLoggedIn && (\r\n                  <Typography variant=\"h6\">{nameofUser}</Typography>\r\n                )}\r\n              </Box>\r\n              <Box className={classes.box2}>\r\n                <Typography variant=\"h6\">Crypto Portfolio</Typography>\r\n              </Box>\r\n              <Box className={classes.box3}>\r\n                {isLoggedIn && (\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    onClick={() => dispatch(logoutUser())}\r\n                  >\r\n                    Log Out\r\n                  </Button>\r\n                )}\r\n                {!isLoggedIn && (\r\n                  <div>\r\n                    <Button\r\n                      color=\"inherit\"\r\n                      onClick={() => {\r\n                        history.push(\"/login\");\r\n                      }}\r\n                    >\r\n                      Log In\r\n                    </Button>\r\n                    <Button\r\n                      color=\"inherit\"\r\n                      onClick={() => {\r\n                        history.push(\"/register\");\r\n                      }}\r\n                    >\r\n                      Register\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n              </Box>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </Box>\r\n        <Box className={classes.blockBox}>\r\n          <Box className={classes.inlineBox}>\r\n            <Drawer\r\n              variant=\"permanent\"\r\n              className={classes.drawer}\r\n              classes={{ paper: classes.drawerPaper }}\r\n            >\r\n              <Divider />\r\n              <List>\r\n                {\r\n                  items.length > 0 &&\r\n                    //////////////////\r\n                    items.map((item, index) => {\r\n                      const { text, onClick, id, image } = item;\r\n\r\n                      return (\r\n                        <ListItem button key={text} onClick={onClick}>\r\n                          <ListItemIcon>\r\n                            <img src={image} width=\"20\" height=\"20\" />\r\n                          </ListItemIcon>\r\n                          <ListItemText primary={text} />\r\n                        </ListItem>\r\n                      );\r\n                    })\r\n                  ////////////////////////\r\n                }\r\n                {items.length <= 0 && (\r\n                  <ListItem button>\r\n                    <ListItemIcon>\r\n                      <MonetizationOnIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"No Coins Added\" />\r\n                  </ListItem>\r\n                )}\r\n              </List>\r\n              <Divider />\r\n              <ListItem\r\n                button\r\n                key=\"addcoin\"\r\n                onClick={() => history.push(\"/addcoin\")}\r\n              >\r\n                <ListItemIcon>\r\n                  <MonetizationOnIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Add Coin\" />\r\n              </ListItem>\r\n              <Divider />\r\n              <ListItem\r\n                button\r\n                key=\"portfoliocards\"\r\n                onClick={() =>\r\n                  history.push({\r\n                    pathname: \"/cards\",\r\n                  })\r\n                }\r\n              >\r\n                <ListItemIcon>\r\n                  <MonetizationOnIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Your Portfolio\" />\r\n              </ListItem>\r\n            </Drawer>\r\n          </Box>\r\n          <Box className={classes.content}>\r\n            <div className={classes.cenDiv}>\r\n              <Switch>\r\n                <Route exact path={match.url + `lightchart`}>\r\n                  <RealTimeChart />\r\n                </Route>\r\n                <Route exact path={match.url + `addcoin`}>\r\n                  <AddCoin />\r\n                </Route>\r\n                <Route exact path={match.url + `cards`}>\r\n                  <PortfolioCards />\r\n                </Route>\r\n              </Switch>\r\n            </div>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\CoinHandlers.js",["155"],"import { setSnackbar } from \"../../ducks/Snackbar\";\r\nimport { addCoin, removeCoin } from \"../../ducks/CoinDucks\";\r\nimport { setTrigger } from \"../../ducks/Trigger\";\r\nimport { call, put } from \"redux-saga/effects\";\r\nimport {\r\n  getHistoricalData,\r\n  getCoinDetails,\r\n} from \"../../../services/CryptoAPIService\";\r\nimport {\r\n  addCoinToDb,\r\n  removeCoinFromDb,\r\n} from \"../../../services/PortfolioServices\";\r\n\r\nexport function* handleCheckCoin(action) {\r\n  //yield put(setSnackbar(true, \"success\", \"Your coin is added\"));\r\n  try {\r\n    console.log(\"Check Coin caught\" + JSON.stringify(action));\r\n    const { id, token } = action;\r\n\r\n    if (isNaN(token) || Number(token) < 0) {\r\n      throw \"Enter Valid Number\";\r\n    }\r\n    //const response = yield call(checkSymbol, symbol);\r\n    const response = yield call(getCoinDetails, id);\r\n    console.log(response);\r\n    const symbol = response.data[0].symbol.toUpperCase();\r\n    const image = response.data[0].image;\r\n    yield call(getHistoricalData, symbol);\r\n    //console.log(\"Response : \" + JSON.stringify(response));\r\n    const serializedState = localStorage.getItem(\"state\");\r\n    if (serializedState != null) {\r\n      const state = JSON.parse(serializedState);\r\n      console.log(\"Local Storage : \" + JSON.stringify(state.auth.username));\r\n      const payload = {\r\n        coin: symbol,\r\n        tokens: token,\r\n        id: id,\r\n        image: image,\r\n        username: state.auth.username,\r\n      };\r\n      if (state.auth.authenticated) {\r\n        console.log(\"Coin added to database\");\r\n        yield call(addCoinToDb, payload);\r\n      }\r\n    }\r\n\r\n    yield put(addCoin(symbol, token, id, image));\r\n    yield put(setTrigger());\r\n    yield put(setSnackbar(true, \"success\", \"Your coin is added\"));\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(setSnackbar(true, \"error\", JSON.stringify(error)));\r\n  }\r\n}\r\n\r\n///////////Remove Coin Request Handler\r\nexport function* handleRemoveCoinReq(action) {\r\n  //yield put(setSnackbar(true, \"success\", \"Your coin is added\"));\r\n  try {\r\n    console.log(\"Ramove Coin caught\" + JSON.stringify(action));\r\n    const { symbol, token } = action;\r\n    console.log(\r\n      \"Symbol : \" + JSON.stringify(symbol) + \" Token \" + JSON.stringify(token)\r\n    );\r\n\r\n    //const response = yield call(checkSymbol, symbol);\r\n    //yield call(checkSymbolBinanceApi, symbol);\r\n    //yield call(getHistoricalData, symbol);\r\n    //console.log(\"Response : \" + JSON.stringify(response));\r\n    const serializedState = localStorage.getItem(\"state\");\r\n    if (serializedState != null) {\r\n      const state = JSON.parse(serializedState);\r\n      console.log(\"Local Storage : \" + JSON.stringify(state.auth.username));\r\n      const payload = {\r\n        coin: symbol,\r\n        username: state.auth.username,\r\n      };\r\n      if (state.auth.authenticated) {\r\n        console.log(\"Coin added to database\");\r\n        yield call(removeCoinFromDb, payload);\r\n      }\r\n    }\r\n\r\n    yield put(removeCoin(symbol));\r\n    yield put(setTrigger());\r\n    yield put(setSnackbar(true, \"success\", \"Coin is removed\"));\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(setSnackbar(true, \"error\", JSON.stringify(error)));\r\n  }\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\Authentication.js",["156","157","158"],"import { call, put } from \"redux-saga/effects\";\r\nimport { setAuthenticated } from \"../../ducks/Authentication\";\r\nimport {\r\n  authenticateUser,\r\n  refreshToken,\r\n  cancelToken,\r\n} from \"../requests/Authentication\";\r\nimport { refreshToken as refresh } from \"../../ducks/Authentication\";\r\nimport store from \"../../ConfigureStore\";\r\nimport { setSnackbar } from \"../../ducks/Snackbar\";\r\nimport { getPortfolio } from \"../../sagas/requests/Authentication\";\r\nimport { addCoin, resetCoins } from \"../../ducks/CoinDucks\";\r\n\r\nexport function* handleLoginUser(action) {\r\n  try {\r\n    console.log(\"handler caught\");\r\n\r\n    const response = yield call(authenticateUser, action.payload);\r\n    console.log(\"handler caught response : \" + JSON.stringify(response));\r\n\r\n    let authentication = false;\r\n    let username = action.payload.username;\r\n    let coins = null;\r\n    let name = \"\";\r\n    if (response.status === 200) {\r\n      authentication = true;\r\n      const res = yield call(getPortfolio, username);\r\n      console.log(\"returned data : \" + JSON.stringify(res));\r\n      localStorage.setItem(\"portfolio\", JSON.stringify(res));\r\n      username = res.username;\r\n      name = res.name;\r\n      coins = res.coins;\r\n      yield put(resetCoins());\r\n      console.log(\"Response : \" + JSON.stringify(name));\r\n      if (coins != null) {\r\n        for (const [key, value] of Object.entries(coins)) {\r\n          yield put(addCoin(key, value.tokens, value.id, value.image));\r\n          console.log(key, value);\r\n        }\r\n      }\r\n    }\r\n    //const { authentication } = response;\r\n    yield put(setAuthenticated(authentication, username, name));\r\n    yield put(setSnackbar(true, \"success\", \"Log In Successful\"));\r\n  } catch (error) {\r\n    console.log(\"Error caught : \" + error);\r\n    let authentication = false;\r\n    let username = null;\r\n    yield put(setAuthenticated(authentication));\r\n    yield put(setSnackbar(true, \"error\", \"Log In UnSuccessful\"));\r\n  }\r\n}\r\n\r\nexport function* handleRefreshToken(action) {\r\n  try {\r\n    console.log(\"handler caught\");\r\n    const response = yield call(refreshToken);\r\n    console.log(\"handler caught response : \" + JSON.stringify(response));\r\n    let authentication = false;\r\n    if (response.status === 200) {\r\n      authentication = true;\r\n    }\r\n    //const { authentication } = response;\r\n    yield put(setAuthenticated(authentication));\r\n  } catch (error) {\r\n    let authentication = false;\r\n    yield put(setAuthenticated(authentication));\r\n    //console.log(error);\r\n  }\r\n}\r\n\r\nexport function* handleLogoutUser(action) {\r\n  try {\r\n    const response = yield call(cancelToken);\r\n    console.log(\"handler caught response : \" + JSON.stringify(response));\r\n    //const { authentication } = response;\r\n    yield put(resetCoins());\r\n    yield put(setAuthenticated(false, null, null));\r\n    yield put(setSnackbar(true, \"success\", \"Log Out Successful\"));\r\n  } catch (error) {\r\n    yield put(resetCoins());\r\n    yield put(setAuthenticated(false, null, null));\r\n    yield put(setSnackbar(true, \"success\", \"Log Out Successful\"));\r\n    //console.log(error);\r\n  }\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\AddCoin.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\PortfolioCards.jsx",["159","160"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport CryptoCard from \"./CryptoCard\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport TotalPortfolioValue from \"../components/TotalPortfolioValue\";\r\n\r\nexport default function PortfolioCards() {\r\n  // const [totalValue, setTotalValue] = useState(0.0);\r\n  const [items, setItems] = useState([]);\r\n  const coins = useSelector((state) => state.coins.coins);\r\n\r\n  useEffect(() => {\r\n    var itemsList = [];\r\n    for (const [symbol, { token, image, id }] of Object.entries(coins)) {\r\n      itemsList.push({\r\n        symbol,\r\n        tokens: token,\r\n        image,\r\n        id,\r\n      });\r\n    }\r\n    setItems(itemsList);\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container direction=\"column\" spacing={2}>\r\n      <Grid item>\r\n        <Typography>Your Portfolio</Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <TotalPortfolioValue />\r\n      </Grid>\r\n      <Grid item container>\r\n        <Grid item xs={false} sm={false} md={2} />\r\n        <Grid item xs={12} sm={12} md={8} container spacing={2}>\r\n          {items.map((item, index) => {\r\n            // console.log(\"item : \" + JSON.stringify(item));\r\n            return <CryptoCard key={item[\"symbol\"]} details={item} />;\r\n          })}\r\n        </Grid>\r\n        <Grid item xs={false} sm={false} md={2} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\PortfolioServices.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\requests\\Authentication.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\Chart.jsx",[],["161","162"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoCard.jsx",[],["163","164"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Trigger.js",["165"],"//export const CHECK_COIN = \"CHECK_COIN\";\r\nconst SET_TRUE = \"SET_TRUE\";\r\nconst SET_FALSE = \"SET_FALSE\";\r\n\r\nconst initialState = {\r\n  boolTrigger: false,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_TRUE:\r\n      return {\r\n        boolTrigger: true,\r\n      };\r\n    case SET_FALSE:\r\n      return {\r\n        boolTrigger: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setTrigger = () => ({\r\n  type: SET_TRUE,\r\n});\r\n\r\nexport const resetTrigger = () => ({\r\n  type: SET_FALSE,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\TotalValueDucks.js",["166","167"],"const ADD_VALUE = \"ADD_VALUE\";\r\nconst REMOVE_VALUE = \"REMOVE_VALUE\";\r\nconst RESET_VALUES = \"RESET_VALUES\";\r\n\r\nconst intialState = {\r\n  coins: {},\r\n};\r\n\r\nexport default (state = intialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_VALUE:\r\n      let { symbol, totValue } = action;\r\n      //console.log(\"ADD COIN Reducer \" + symbol + \" \" + token);\r\n      //const newMap = state.coins.set(symbol, token);\r\n      var newState = {\r\n        coins: { ...state.coins },\r\n      };\r\n      newState.coins[symbol] = totValue;\r\n      return newState;\r\n    case REMOVE_VALUE:\r\n      delete state.coins[action.symbol];\r\n      var newState = {\r\n        coins: { ...state.coins },\r\n      };\r\n      return newState;\r\n    case RESET_VALUES:\r\n      return intialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const addValue = (symbol, totValue) => ({\r\n  type: ADD_VALUE,\r\n  symbol,\r\n  totValue,\r\n});\r\n\r\nexport const removeValue = (symbol) => ({\r\n  type: REMOVE_VALUE,\r\n  symbol,\r\n});\r\n\r\nexport const resetValues = () => ({\r\n  type: RESET_VALUES,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\TotalPortfolioValue.jsx",["168"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { resetTrigger } from \"../redux/ducks/Trigger\";\r\n\r\nexport default function TotalPortfolioValue() {\r\n  const dispatch = useDispatch();\r\n  const [totalValue, setTotalValue] = useState(0.0);\r\n  const totValues = useSelector((state) => state.totValues.coins);\r\n  const reload = useSelector((state) => state.trigger.boolTrigger);\r\n\r\n  const [noOfCoins, setNoOfCoins] = useState(0);\r\n\r\n  useEffect(() => {\r\n    //console.log(JSON.stringify(totValues));\r\n\r\n    var tempTotValue = 0.0;\r\n    setNoOfCoins(0);\r\n\r\n    for (const [symbol, values] of Object.entries(totValues)) {\r\n      console.log(JSON.stringify(symbol) + \" \" + JSON.stringify(values));\r\n      tempTotValue = parseFloat(tempTotValue) + parseFloat(values);\r\n      setNoOfCoins(noOfCoins + 1);\r\n    }\r\n    setTotalValue(tempTotValue);\r\n    dispatch(resetTrigger());\r\n    console.log(\"No of Coins : \" + JSON.stringify(noOfCoins));\r\n  }, [reload]);\r\n\r\n  return (\r\n    <div>\r\n      <Typography>\r\n        Total Portfolio value :{\" \"}\r\n        {console.log(\"No of Coins : \" + JSON.stringify(noOfCoins))}\r\n        {noOfCoins > 0\r\n          ? totalValue.toLocaleString(\"en-US\", {\r\n              style: \"currency\",\r\n              currency: \"USD\",\r\n            })\r\n          : 0}\r\n      </Typography>\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\RealTimeChart.jsx",["169","170","171","172","173","174"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { createChart, line } from \"lightweight-charts\";\r\nimport { useDispatch } from \"react-redux\";\r\n//import PropTypes from \"prop-types\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { getHistoricalData } from \"./../services/CryptoAPIService\";\r\nimport { Card, Typography, Grid, Button, makeStyles } from \"@material-ui/core\";\r\n\r\nimport { removeCoinReq } from \"../redux/ducks/CoinDucks\";\r\n\r\nconst HEIGHT = 600;\r\n\r\nlet chart;\r\nlet candlestickSeries;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainCard: {\r\n    width: 1000,\r\n  },\r\n  titleItems: {\r\n    display: \"flex\",\r\n    direction: \"row\",\r\n    alignItems: \"left\",\r\n  },\r\n}));\r\n\r\nexport default function RealTimeChart() {\r\n  const chartRef = React.useRef();\r\n  const legendRef = React.useRef();\r\n  const location = useLocation();\r\n\r\n  const classes = useStyles();\r\n\r\n  const symbol = location.state.coinCode;\r\n  const legend = symbol + \"-USDT\";\r\n\r\n  const { token, id, image } = location.state.value;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [rate, setRate] = useState(0.0);\r\n\r\n  const [lineSeries, setLineSeries] = useState([\r\n    {\r\n      data: [],\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    chart = createChart(chartRef.current, {\r\n      width: chartRef.current.offsetWidth,\r\n      height: HEIGHT,\r\n      alignLabels: true,\r\n      timeScale: {\r\n        rightOffset: 0,\r\n        barSpacing: 15,\r\n        fixLeftEdge: false,\r\n        lockVisibleTimeRangeOnResize: false,\r\n        rightBarStaysOnScroll: true,\r\n        borderVisible: false,\r\n        borderColor: \"#fff000\",\r\n        visible: true,\r\n        timeVisible: true,\r\n        secondsVisible: false,\r\n        shiftVisibleRangeOnNewBar: true,\r\n        autoScale: true,\r\n      },\r\n      rightPriceScale: {\r\n        scaleMargins: {\r\n          top: 0.3,\r\n          bottom: 0.25,\r\n        },\r\n        borderVisible: false,\r\n      },\r\n      priceScale: {\r\n        autoScale: true,\r\n      },\r\n    });\r\n\r\n    candlestickSeries = chart.addLineSeries();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    ////////////////////////////////////////\r\n    getHistoricalData(location.state.coinCode)\r\n      .then((incD) => {\r\n        //console.log(JSON.stringify(incD));\r\n        candlestickSeries.setData(incD);\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n    ////////////////////////////////////////\r\n  }, [location.state.coinCode]);\r\n\r\n  ////////////////below code is for websocket\r\n  const API_WS =\r\n    \"wss://stream.binance.com:9443/ws/\" +\r\n    location.state.coinCode.toLowerCase() +\r\n    \"usdt@ticker\";\r\n  var conn = new WebSocket(API_WS);\r\n  useEffect(() => {\r\n    // console.log(conn);\r\n    // console.log(JSON.stringify(location.state.coinCode));\r\n    conn.onmessage = (e) => {\r\n      // console.log(\"value : \");\r\n      // console.log(e);\r\n      var newKlineMap = JSON.parse(e.data);\r\n      const newPoint = {\r\n        time: newKlineMap.E / 1000,\r\n        value: parseFloat(newKlineMap.c),\r\n      };\r\n\r\n      // console.log(newKlineMap.k.t + \" \" + newKlineMap.k.o);\r\n      //console.log(\"Value : \" + JSON.stringify(newPoint));\r\n      candlestickSeries.update(newPoint);\r\n      setRate(parseFloat(newKlineMap.c));\r\n      // chart.timeScale().fitContent();\r\n      // if (previousTime <= newPoint.time) {\r\n      //   console.log(\"Time Update : \" + previousTime);\r\n      //   candlestickSeries.update(newPoint);\r\n      //   previousTime = newPoint.time;\r\n      // }\r\n    };\r\n    return () => {\r\n      conn.close();\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    const handler = () => {\r\n      chart.resize(chartRef.current.offsetWidth, HEIGHT);\r\n    };\r\n    window.addEventListener(\"resize\", handler);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handler);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Card className={classes.mainCard}>\r\n      <Grid container>\r\n        <Grid item container justify=\"center\">\r\n          <Grid>\r\n            <div className={classes.titleItems}>\r\n              <img src={image} width=\"30\" height=\"30\" />{\" \"}\r\n              <Typography variant=\"h5\">{legend}</Typography>{\" \"}\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container justify=\"space-around\">\r\n          <Typography>\r\n            Rate :{\" \"}\r\n            {rate.toLocaleString(\"en-US\", {\r\n              style: \"currency\",\r\n              currency: \"USD\",\r\n            })}\r\n          </Typography>\r\n          <Typography>Tokens : {token} </Typography>\r\n          <Typography>\r\n            Value :{\" \"}\r\n            {(parseFloat(rate) * parseFloat(token)).toLocaleString(\"en-US\", {\r\n              style: \"currency\",\r\n              currency: \"USD\",\r\n            })}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item container>\r\n          <div\r\n            ref={chartRef}\r\n            id=\"chart\"\r\n            style={{ position: \"relative\", width: \"100%\" }}\r\n          >\r\n            <div\r\n              ref={legendRef}\r\n              style={{\r\n                position: \"absolute\",\r\n                zIndex: 2,\r\n                color: \"#333\",\r\n                padding: 10,\r\n              }}\r\n            >\r\n              {legend}\r\n            </div>\r\n          </div>\r\n        </Grid>\r\n        <Grid item container justify=\"flex-end\">\r\n          <Button\r\n            variant=\"contained\"\r\n            style={{\r\n              backgroundColor: \"red\",\r\n            }}\r\n            onClick={() => dispatch(removeCoinReq(symbol))}\r\n          >\r\n            Remove Coin\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Registration.jsx",["175"],"import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  FormGroup,\r\n  Typography,\r\n  TextField,\r\n  makeStyles,\r\n  Link,\r\n  Box,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { ErrorMessage, Form, Formik, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { createUser, checkUsernameExist } from \"../services/PortfolioServices\";\r\nimport { setSnackbar } from \"../redux/ducks/Snackbar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst initialValues = {\r\n  name: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n  passwordConfirmation: \"\",\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  regPaper: {\r\n    width: \"400px\",\r\n    align: \"center\",\r\n    display: \"block\",\r\n    align: \"center\",\r\n    padding: theme.spacing(2, 2),\r\n    margin: theme.spacing(8, 2),\r\n  },\r\n  buttonBlock: {\r\n    width: \"100%\",\r\n    margin: \"auto auto\",\r\n    display: \"block\",\r\n  },\r\n}));\r\n\r\nexport default function Registration() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div align=\"center\">\r\n      <Card className={classes.regPaper}>\r\n        <CardContent>\r\n          <div>\r\n            <img\r\n              src={process.env.PUBLIC_URL + \"/assets/crypto.png\"}\r\n              width={50}\r\n              height={50}\r\n              alt=\"logo\"\r\n            />\r\n            <Typography variant=\"h4\">Crypto-Portfolio</Typography>\r\n          </div>\r\n          <div>\r\n            <Typography variant=\"h6\">Registration</Typography>\r\n          </div>\r\n\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={Yup.object().shape({\r\n              name: Yup.string()\r\n                .required()\r\n                .min(6, \"Name needs to be atleast 6 character long\")\r\n                .max(50, \"Name cannot be more than 50 characters long4\"),\r\n              username: Yup.string()\r\n                .required(\"User Name is required\")\r\n                .test(\r\n                  \"username\",\r\n                  \"Username Exists already\",\r\n                  (value, context) => {\r\n                    //console.log(UserService.checkUsernameExist(value).then((response)=> Boolean(response) ));\r\n                    //return !( value === 'user1');\r\n                    let returnvalue = checkUsernameExist(value);\r\n                    console.log(JSON.stringify(returnvalue));\r\n                    return returnvalue;\r\n                  }\r\n                )\r\n                .min(6, \"Username must be at least 6 characters\")\r\n                .max(50, \"Username must be less 50 characters\"),\r\n              password: Yup.string()\r\n                .min(8, \"Password must be at least 8 characters\")\r\n                .max(50, \"Password must be less than 50 characters\")\r\n                .matches(\r\n                  /^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/,\r\n                  \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"\r\n                )\r\n                .required(\"Password is required\"),\r\n              passwordConfirmation: Yup.string()\r\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n                .required(\"Confirm Password is required\"),\r\n            })}\r\n            onSubmit={(values, formikHelpers) => {\r\n              createUser(values)\r\n                .then((response) => {\r\n                  console.log(JSON.stringify(response));\r\n                  dispatch(\r\n                    setSnackbar(true, \"success\", \"User Registration Successful\")\r\n                  );\r\n                  history.push(\"/login\");\r\n                })\r\n                .catch(\r\n                  dispatch(\r\n                    setSnackbar(true, \"error\", \"User Registration Failed\")\r\n                  )\r\n                );\r\n            }}\r\n          >\r\n            {({ values, errors, isSubmitting, isValidating }) => (\r\n              <Form>\r\n                <Box marginBottom={2}>\r\n                  <FormGroup>\r\n                    <Field\r\n                      required\r\n                      name=\"name\"\r\n                      type=\"string\"\r\n                      as={TextField}\r\n                      label=\"Full Name\"\r\n                    />\r\n                    <ErrorMessage name=\"name\" />\r\n                  </FormGroup>\r\n                </Box>\r\n                <Box marginBottom={2}>\r\n                  <FormGroup>\r\n                    <Field\r\n                      required\r\n                      name=\"username\"\r\n                      type=\"string\"\r\n                      as={TextField}\r\n                      label=\"User Name\"\r\n                    />\r\n                    <ErrorMessage name=\"username\" />\r\n                  </FormGroup>\r\n                </Box>\r\n                <Box marginBottom={2}>\r\n                  <FormGroup>\r\n                    <Field\r\n                      required\r\n                      id=\"password\"\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      as={TextField}\r\n                      type=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                    />\r\n                    <ErrorMessage name=\"password\" />\r\n                  </FormGroup>\r\n                </Box>\r\n                <Box marginBottom={2}>\r\n                  <FormGroup>\r\n                    <Field\r\n                      required\r\n                      id=\"passwordConfirmation\"\r\n                      name=\"passwordConfirmation\"\r\n                      label=\"Confirm Password\"\r\n                      as={TextField}\r\n                      type=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                    />\r\n                    <ErrorMessage name=\"passwordConfirmation\" />\r\n                  </FormGroup>\r\n                </Box>\r\n                <div />\r\n                <Box marginBottom={1}>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting || isValidating}\r\n                    className={classes.buttonBlock}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Box>\r\n                <Box marginBottom={1}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    type=\"reset\"\r\n                    disabled={isSubmitting || isValidating}\r\n                    className={classes.buttonBlock}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                </Box>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n          <Typography variant=\"subtitle1\">\r\n            Already Registered?{\" \"}\r\n            <Link onClick={() => history.push(\"/login\")}>Login</Link>\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\IdleTimerComponent.jsx",["176","177"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\IdleTimerDialog.jsx",["178","179","180","181"],"import { SettingsApplicationsRounded } from \"@material-ui/icons\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport IdleTimer from \"react-idle-timer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { logoutUser, refreshToken } from \"../redux/ducks/Authentication\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nexport default function IdleTimerDialog() {\r\n  const [open, setOpen] = useState(false);\r\n  const idleTimerRef = useRef(null);\r\n  const sessionTimeoutRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  //   const classes = useStyles();\r\n\r\n  const nameofUser = useSelector((state) => state.auth.name);\r\n  const username = useSelector((state) => state.auth.username);\r\n  const isLoggedIn = useSelector((state) => state.auth.authenticated);\r\n\r\n  const onIdle = () => {\r\n    console.log(\"User is idle\");\r\n    setOpen(true);\r\n    sessionTimeoutRef.current = setTimeout(logOut, 60 * 1000);\r\n  };\r\n\r\n  const logOut = () => {\r\n    setOpen(false);\r\n    dispatch(logoutUser());\r\n    // setIsLoggedIn(false);\r\n    clearTimeout(sessionTimeoutRef.current);\r\n    console.log(\"User has been logged out\");\r\n  };\r\n  const stayActive = () => {\r\n    setOpen(false);\r\n    dispatch(refreshToken());\r\n    clearTimeout(sessionTimeoutRef.current);\r\n    console.log(\"User is active\");\r\n  };\r\n\r\n  /////////\r\n\r\n  return (\r\n    <div>\r\n      {isLoggedIn && (\r\n        <IdleTimer ref={idleTimerRef} timeout={1000 * 60} onIdle={onIdle} />\r\n      )}\r\n      <Dialog open={open} onClose={stayActive}>\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          {\"You've been idle for a while!\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            You will be logged out soon\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={logOut} color=\"primary\">\r\n            Log Out\r\n          </Button>\r\n          <Button onClick={stayActive} color=\"primary\" autoFocus>\r\n            Stay Active\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\deleted\\CryptoChart.jsx",["182"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\CryptoAPIService.js",["183","184"],"import axios from \"axios\";\r\n\r\nexport async function getHistoricalData(symbol) {\r\n  const pairing = symbol + \"USDT\";\r\n  const instance = axios.create();\r\n\r\n  return instance\r\n    .get(`https://api.binance.com/api/v3/klines`, {\r\n      params: { symbol: pairing, interval: \"1d\", limit: 1000 },\r\n    })\r\n    .then((res) => {\r\n      const cdata = res.data.map((d) => {\r\n        return {\r\n          time: d[0] / 1000,\r\n          value: parseFloat(d[1]),\r\n        };\r\n      });\r\n      return cdata;\r\n    })\r\n    .catch((error) => {\r\n      throw \"Invalid Symbol\";\r\n    });\r\n}\r\n\r\nexport async function getAveragePrice(symbol) {\r\n  const pairing = symbol + \"USDT\";\r\n\r\n  // const instance = axios.create({\r\n  //   baseURL: \"http://localhost:8080\",\r\n  // });\r\n\r\n  const instance = axios.create();\r\n\r\n  return instance\r\n    .get(`https://api.binance.com/api/v3/avgPrice`, {\r\n      params: { symbol: pairing },\r\n    })\r\n    .then((res) => {\r\n      //console.log(res.data.price);\r\n      return res.data.price;\r\n    })\r\n    .catch((error) => {\r\n      throw \"Invalid Symbol \" + JSON.stringify(error);\r\n    });\r\n}\r\n\r\nexport async function getCoinDetails(id) {\r\n  const instance = axios.create({\r\n    baseURL: \"https://api.coingecko.com/api/v3\",\r\n  });\r\n\r\n  return instance.get(`/coins/markets`, {\r\n    params: {\r\n      vs_currency: \"usd\",\r\n      ids: id,\r\n    },\r\n  });\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\deleted\\LoginPage.jsx",["185","186","187","188","189","190"],{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","severity":1,"message":"196","line":19,"column":9,"nodeType":"197","messageId":"198","endLine":19,"endColumn":16},{"ruleId":"199","severity":1,"message":"200","line":32,"column":1,"nodeType":"201","endLine":40,"endColumn":3},{"ruleId":"199","severity":1,"message":"200","line":9,"column":1,"nodeType":"201","endLine":30,"endColumn":3},{"ruleId":"199","severity":1,"message":"200","line":11,"column":1,"nodeType":"201","endLine":33,"endColumn":3},{"ruleId":"202","severity":1,"message":"203","line":24,"column":11,"nodeType":"197","messageId":"204","endLine":24,"endColumn":19},{"ruleId":"205","severity":1,"message":"206","line":43,"column":22,"nodeType":"207","endLine":43,"endColumn":26},{"ruleId":"208","severity":1,"message":"209","line":52,"column":11,"nodeType":"210","endLine":56,"endColumn":13},{"ruleId":"195","severity":1,"message":"211","line":117,"column":9,"nodeType":"197","messageId":"198","endLine":117,"endColumn":17},{"ruleId":"205","severity":1,"message":"212","line":143,"column":6,"nodeType":"213","endLine":143,"endColumn":14,"suggestions":"214"},{"ruleId":"195","severity":1,"message":"215","line":145,"column":9,"nodeType":"197","messageId":"198","endLine":145,"endColumn":21},{"ruleId":"195","severity":1,"message":"216","line":209,"column":46,"nodeType":"197","messageId":"198","endLine":209,"endColumn":48},{"ruleId":"217","severity":1,"message":"218","line":214,"column":29,"nodeType":"210","endLine":214,"endColumn":71},{"ruleId":"219","severity":1,"message":"220","line":21,"column":7,"nodeType":"221","messageId":"222","endLine":21,"endColumn":34},{"ruleId":"195","severity":1,"message":"223","line":8,"column":26,"nodeType":"197","messageId":"198","endLine":8,"endColumn":33},{"ruleId":"195","severity":1,"message":"224","line":9,"column":8,"nodeType":"197","messageId":"198","endLine":9,"endColumn":13},{"ruleId":"195","severity":1,"message":"211","line":48,"column":9,"nodeType":"197","messageId":"198","endLine":48,"endColumn":17},{"ruleId":"195","severity":1,"message":"225","line":1,"column":38,"nodeType":"197","messageId":"198","endLine":1,"endColumn":44},{"ruleId":"205","severity":1,"message":"226","line":24,"column":6,"nodeType":"213","endLine":24,"endColumn":8,"suggestions":"227"},{"ruleId":"191","replacedBy":"228"},{"ruleId":"193","replacedBy":"229"},{"ruleId":"191","replacedBy":"230"},{"ruleId":"193","replacedBy":"231"},{"ruleId":"199","severity":1,"message":"200","line":9,"column":1,"nodeType":"201","endLine":22,"endColumn":3},{"ruleId":"199","severity":1,"message":"200","line":9,"column":1,"nodeType":"201","endLine":31,"endColumn":3},{"ruleId":"202","severity":1,"message":"203","line":22,"column":11,"nodeType":"197","messageId":"204","endLine":22,"endColumn":19},{"ruleId":"205","severity":1,"message":"232","line":28,"column":6,"nodeType":"213","endLine":28,"endColumn":14,"suggestions":"233"},{"ruleId":"195","severity":1,"message":"225","line":1,"column":38,"nodeType":"197","messageId":"198","endLine":1,"endColumn":44},{"ruleId":"195","severity":1,"message":"234","line":2,"column":23,"nodeType":"197","messageId":"198","endLine":2,"endColumn":27},{"ruleId":"195","severity":1,"message":"216","line":37,"column":18,"nodeType":"197","messageId":"198","endLine":37,"endColumn":20},{"ruleId":"195","severity":1,"message":"235","line":43,"column":10,"nodeType":"197","messageId":"198","endLine":43,"endColumn":20},{"ruleId":"195","severity":1,"message":"236","line":43,"column":22,"nodeType":"197","messageId":"198","endLine":43,"endColumn":35},{"ruleId":"217","severity":1,"message":"218","line":146,"column":15,"nodeType":"210","endLine":146,"endColumn":57},{"ruleId":"237","severity":1,"message":"238","line":32,"column":5,"nodeType":"239","messageId":"240","endLine":32,"endColumn":10},{"ruleId":"237","severity":1,"message":"241","line":20,"column":5,"nodeType":"239","messageId":"240","endLine":20,"endColumn":20},{"ruleId":"195","severity":1,"message":"242","line":26,"column":10,"nodeType":"197","messageId":"198","endLine":26,"endColumn":20},{"ruleId":"195","severity":1,"message":"243","line":1,"column":10,"nodeType":"197","messageId":"198","endLine":1,"endColumn":37},{"ruleId":"195","severity":1,"message":"244","line":5,"column":10,"nodeType":"197","messageId":"198","endLine":5,"endColumn":20},{"ruleId":"195","severity":1,"message":"245","line":23,"column":9,"nodeType":"197","messageId":"198","endLine":23,"endColumn":19},{"ruleId":"195","severity":1,"message":"211","line":24,"column":9,"nodeType":"197","messageId":"198","endLine":24,"endColumn":17},{"ruleId":"246","severity":1,"message":"247","line":244,"column":47,"nodeType":"248","messageId":"240","endLine":244,"endColumn":49},{"ruleId":"219","severity":1,"message":"220","line":21,"column":7,"nodeType":"221","messageId":"222","endLine":21,"endColumn":30},{"ruleId":"219","severity":1,"message":"220","line":43,"column":7,"nodeType":"221","messageId":"222","endLine":43,"endColumn":55},{"ruleId":"195","severity":1,"message":"249","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":26},{"ruleId":"195","severity":1,"message":"250","line":6,"column":3,"nodeType":"197","messageId":"198","endLine":6,"endColumn":7},{"ruleId":"195","severity":1,"message":"251","line":7,"column":3,"nodeType":"197","messageId":"198","endLine":7,"endColumn":14},{"ruleId":"195","severity":1,"message":"252","line":8,"column":3,"nodeType":"197","messageId":"198","endLine":8,"endColumn":12},{"ruleId":"195","severity":1,"message":"253","line":12,"column":3,"nodeType":"197","messageId":"198","endLine":12,"endColumn":11},{"ruleId":"205","severity":1,"message":"206","line":47,"column":22,"nodeType":"207","endLine":47,"endColumn":26},"no-native-reassign",["254"],"no-negated-in-lhs",["255"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-redeclare","'newState' is already defined.","redeclared","react-hooks/exhaustive-deps","Assignments to the 'errorVisible' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'username' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'coins', 'dispatch', and 'history'. Either include them or remove the dependency array.","ArrayExpression",["256"],"'handleLogout' is assigned a value but never used.","'id' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'refresh' is defined but never used.","'store' is defined but never used.","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'coins'. Either include it or remove the dependency array.",["257"],["254"],["255"],["254"],["255"],"React Hook useEffect has missing dependencies: 'dispatch', 'noOfCoins', and 'totValues'. Either include them or remove the dependency array. You can also do a functional update 'setNoOfCoins(n => ...)' if you only need 'noOfCoins' in the 'setNoOfCoins' call.",["258"],"'line' is defined but never used.","'lineSeries' is assigned a value but never used.","'setLineSeries' is assigned a value but never used.","no-dupe-keys","Duplicate key 'align'.","ObjectExpression","unexpected","Duplicate key 'backgroundColor'.","'isLoggedIn' is assigned a value but never used.","'SettingsApplicationsRounded' is defined but never used.","'makeStyles' is defined but never used.","'nameofUser' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'Component' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'FormGroup' is defined but never used.","'MenuItem' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},"Update the dependencies array to be: [coins, dispatch, history, reload]",{"range":"265","text":"266"},"Update the dependencies array to be: [coins]",{"range":"267","text":"268"},"Update the dependencies array to be: [dispatch, noOfCoins, reload, totValues]",{"range":"269","text":"270"},[3687,3695],"[coins, dispatch, history, reload]",[744,746],"[coins]",[1055,1063],"[dispatch, noOfCoins, reload, totValues]"]