[{"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\index.js":"1","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\App.js":"2","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\reportWebVitals.js":"3","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoChart.jsx":"4","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\Chart.jsx":"5","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\LoginPage.jsx":"6","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Dashboard.jsx":"7","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\ErrorPage.jsx":"8","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\AddCoin.jsx":"9","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Snackbar.js":"10","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ConfigureStore.js":"11","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CustomizedSnackBar.jsx":"12","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\CoinDucks.js":"13","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\rootSaga.js":"14","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\CoinHandlers.js":"15","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\CoinMarketApiService.js":"16"},{"size":808,"mtime":1609862635113,"results":"17","hashOfConfig":"18"},{"size":686,"mtime":1609862892437,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":7997,"mtime":1609822409777,"results":"21","hashOfConfig":"18"},{"size":174,"mtime":1609662732825,"results":"22","hashOfConfig":"18"},{"size":105,"mtime":1609682721287,"results":"23","hashOfConfig":"18"},{"size":5021,"mtime":1609837834071,"results":"24","hashOfConfig":"18"},{"size":105,"mtime":1609682728654,"results":"25","hashOfConfig":"18"},{"size":1223,"mtime":1609866870222,"results":"26","hashOfConfig":"18"},{"size":680,"mtime":1609861655241,"results":"27","hashOfConfig":"18"},{"size":1315,"mtime":1609867562823,"results":"28","hashOfConfig":"18"},{"size":1424,"mtime":1609862948797,"results":"29","hashOfConfig":"18"},{"size":132,"mtime":1609866564228,"results":"30","hashOfConfig":"18"},{"size":251,"mtime":1609867711375,"results":"31","hashOfConfig":"18"},{"size":846,"mtime":1609871718600,"results":"32","hashOfConfig":"18"},{"size":670,"mtime":1609873216665,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1kddrym",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\index.js",[],["71","72"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\App.js",["73"],"import \"./App.css\";\nimport CryptoChart from \"./components/CryptoChart\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport ErrorPage from \"./pages/ErrorPage\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Snackbar from \"./components/CustomizedSnackBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Snackbar />\n      <Router>\n        <Switch>\n          <Route exact path=\"/login\" component={LoginPage} />\n          <Route exact path=\"/error\" component={ErrorPage} />\n          <Route path=\"/\" component={Dashboard} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\reportWebVitals.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoChart.jsx",["74"],"import React, { Component } from \"react\";\r\nimport Chart from \"./Chart\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport { compose } from \"recompose\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst styles = (theme) => ({\r\n  \"chart-container\": {\r\n    height: 400,\r\n    width: 900,\r\n  },\r\n});\r\n\r\nclass CryptoChart extends Component {\r\n  /*constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pairing: this.props.location.state.coinCode + \"-USD\",\r\n      lineChartData: {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            type: \"line\",\r\n            label: this.props.location.state.coinCode + \"-USD\",\r\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n            borderColor: this.props.theme.palette.primary.main,\r\n            pointBackgroundColor: this.props.theme.palette.secondary.main,\r\n            pointBorderColor: this.props.theme.palette.secondary.main,\r\n            borderWidth: \"2\",\r\n            lineTension: 0.45,\r\n            data: [],\r\n          },\r\n        ],\r\n      },\r\n      lineChartOptions: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n          enabled: true,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 10,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n  }*/\r\n\r\n  state = {\r\n    pairing: this.props.location.state.coinCode + \"-USD\",\r\n    lineChartData: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          type: \"line\",\r\n          label: this.props.location.state.coinCode + \"-USD\",\r\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n          borderColor: this.props.theme.palette.primary.main,\r\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\r\n          pointBorderColor: this.props.theme.palette.secondary.main,\r\n          borderWidth: \"2\",\r\n          lineTension: 0.45,\r\n          data: [],\r\n        },\r\n      ],\r\n    },\r\n    lineChartOptions: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      tooltips: {\r\n        enabled: true,\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            ticks: {\r\n              autoSkip: true,\r\n              maxTicksLimit: 10,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"Rerender happend\");\r\n    this.ws = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\r\n    //this.createGDXSocket(this.props.location.state.coinCode);\r\n\r\n    const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n    const newBtcDataSet = { ...oldBtcDataSet };\r\n    newBtcDataSet.label = this.props.location.state.coinCode + \"-USD\";\r\n    const newChartData = {\r\n      ...this.state.lineChartData,\r\n      datasets: [newBtcDataSet],\r\n    };\r\n    console.log(\r\n      \"Inside Mounting Function : \" +\r\n        this.props.location.state.coinCode +\r\n        \"-USD\"\r\n    );\r\n\r\n    this.setState({\r\n      pairing: this.props.location.state.coinCode + \"-USD\",\r\n      lineChartData: newChartData,\r\n    });\r\n\r\n    const subscribe = {\r\n      type: \"subscribe\",\r\n      channels: [\r\n        {\r\n          name: \"ticker\",\r\n          product_ids: [this.state.pairing],\r\n        },\r\n      ],\r\n    };\r\n\r\n    this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };\r\n\r\n    //below code is replaced by a call to sendmessage function\r\n    /*this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };*/\r\n\r\n    this.ws.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n      if (value.type !== \"ticker\" || value.product_id !== this.state.pairing) {\r\n        return;\r\n      }\r\n      console.log(\"value : \" + JSON.stringify(value));\r\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n      const newBtcDataSet = { ...oldBtcDataSet };\r\n      newBtcDataSet.data.push(value.price);\r\n      const newChartData = {\r\n        ...this.state.lineChartData,\r\n        datasets: [newBtcDataSet],\r\n        labels: this.state.lineChartData.labels.concat(\r\n          new Date().toLocaleTimeString()\r\n        ),\r\n      };\r\n      this.setState({ lineChartData: newChartData });\r\n    };\r\n  }\r\n\r\n  /*sendMessage = (msg) => {\r\n    // Wait until the state of the socket is not ready and send the message when it is...\r\n    waitForSocketConnection(function () {\r\n      this.ws.send(JSON.stringify(msg));\r\n      console.log(\" subscribe send : \" + JSON.stringify(msg));\r\n    });\r\n  };\r\n\r\n  // Make the function wait until the connection is made...\r\n  waitForSocketConnection = (callback) => {\r\n    setTimeout(function () {\r\n      if (this.ws.readyState === 1) {\r\n        console.log(\"Connection is made\");\r\n        if (callback != null) {\r\n          callback();\r\n        }\r\n      } else {\r\n        console.log(\"wait for connection...\");\r\n        waitForSocketConnection(callback);\r\n      }\r\n    }, 5); // wait 5 milisecond for the connection...\r\n  };*/\r\n\r\n  createGDXSocket(coinCode) {\r\n    const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n    const newBtcDataSet = { ...oldBtcDataSet };\r\n    newBtcDataSet.data = [];\r\n    newBtcDataSet.label = this.props.location.state.coinCode + \"-USD\";\r\n    const newChartData = {\r\n      ...this.state.lineChartData,\r\n      datasets: [newBtcDataSet],\r\n      labels: [],\r\n    };\r\n    console.log(\r\n      \"Inside GDX Socket Function : \" +\r\n        this.props.location.state.coinCode +\r\n        \"-USD\"\r\n    );\r\n    console.log(\"Check 1\");\r\n    this.setState({ pairing: this.props.location.state.coinCode + \"-USD\" });\r\n    this.setState({ lineChartData: newChartData });\r\n    console.log(\"Check 2\");\r\n    const subscribe = {\r\n      type: \"subscribe\",\r\n      channels: [\r\n        {\r\n          name: \"ticker\",\r\n          product_ids: [this.props.location.state.coinCode + \"-USD\"],\r\n        },\r\n      ],\r\n    };\r\n\r\n    if (this.ws.readyState === 1) {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    }\r\n\r\n    //below code is replaced by a call to sendmessage function\r\n    /*this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };\r\n\r\n    this.ws.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n      if (value.type !== \"ticker\") {\r\n        return;\r\n      }\r\n\r\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n      const newBtcDataSet = { ...oldBtcDataSet };\r\n      newBtcDataSet.data.push(value.price);\r\n      const newChartData = {\r\n        ...this.state.lineChartData,\r\n        datasets: [newBtcDataSet],\r\n        labels: this.state.lineChartData.labels.concat(\r\n          new Date().toLocaleTimeString()\r\n        ),\r\n      };\r\n      this.setState({ lineChartData: newChartData });\r\n    };*/\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    let newPairing = this.props.location.state.coinCode + \"-USD\";\r\n    let prevPairing = prevProps.location.state.coinCode + \"-USD\";\r\n    if (newPairing.localeCompare(prevPairing) != 0) {\r\n      //this.forceUpdate();\r\n      console.log(\"New State : \" + newPairing);\r\n      console.log(\"Previous State : \" + prevPairing);\r\n      console.log(\"Component updates\");\r\n      this.createGDXSocket(this.props.location.state.coinCode);\r\n      //this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.ws.close();\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <Card className={classes[\"chart-container\"]}>\r\n        <Chart\r\n          data={this.state.lineChartData}\r\n          options={this.state.lineChartOptions}\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  withStyles(styles, { withTheme: true })\r\n)(CryptoChart);\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\Chart.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\LoginPage.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Dashboard.jsx",["75","76","77"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  AppBar,\r\n  IconButton,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Divider,\r\n  ListItemText,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\nimport { useHistory, Switch } from \"react-router-dom\";\r\nimport CryptoChart from \"../components/CryptoChart\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AddCoin from \"./../components/AddCoin\";\r\n\r\nconst drawerWidth = 240;\r\nconst appBarHeight = 64;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    height: \"calc(100% - 64px)\",\r\n    top: 64,\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  contentIn: {\r\n    marginTop: appBarHeight,\r\n  },\r\n  content: {\r\n    marginTop: appBarHeight,\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    marginLeft: drawerWidth,\r\n  },\r\n  blockBox: {\r\n    display: \"block\",\r\n  },\r\n  inlineBlockBox: { display: \"inline-block\" },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function Dashboard({ match }) {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n\r\n  const itemsList = [\r\n    {\r\n      text: \"BTC-USD\",\r\n      onClick: () =>\r\n        history.push({\r\n          pathname: \"/chart\",\r\n          state: { coinCode: \"BTC\" },\r\n        }),\r\n    },\r\n    {\r\n      text: \"ETH-USD\",\r\n      onClick: () =>\r\n        history.push({\r\n          pathname: \"/chart\",\r\n          state: { coinCode: \"ETH\" },\r\n        }),\r\n    },\r\n  ];\r\n\r\n  const handleLogout = () => {};\r\n\r\n  return (\r\n    <div>\r\n      <Box className={classes.blockBox}>\r\n        <Box className={classes.blockBox}>\r\n          <AppBar position=\"fixed\" className={classes.appBar}>\r\n            <Toolbar>\r\n              <Typography variant=\"h6\" className={classes.title} align=\"center\">\r\n                Crypto Portfolio\r\n              </Typography>\r\n              <Button color=\"inherit\" onClick={handleLogout}>\r\n                Log Out\r\n              </Button>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </Box>\r\n        <Box className={classes.blockBox}>\r\n          <Box className={classes.inlineBox}>\r\n            <Drawer\r\n              variant=\"permanent\"\r\n              className={classes.drawer}\r\n              classes={{ paper: classes.drawerPaper }}\r\n            >\r\n              <div className={classes.drawerHeader}>\r\n                {/*<IconButton>\r\n                  <MonetizationOnIcon />\r\n                </IconButton>*/}\r\n              </div>\r\n              <Divider />\r\n              <List>\r\n                {itemsList.map((item, index) => {\r\n                  const { text, icon, onClick } = item;\r\n                  return (\r\n                    <ListItem button key={text} onClick={onClick}>\r\n                      <ListItemIcon>\r\n                        <MonetizationOnIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary={text} />\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n              </List>\r\n              <Divider />\r\n              <ListItem\r\n                button\r\n                key=\"addcoin\"\r\n                onClick={() => history.push(\"/addcoin\")}\r\n              >\r\n                <ListItemIcon>\r\n                  <MonetizationOnIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Add Coin\" />\r\n              </ListItem>\r\n            </Drawer>\r\n          </Box>\r\n          <Box className={classes.content}>\r\n            <Switch>\r\n              <Route exact path={match.url + `chart`} component={CryptoChart}>\r\n                <CryptoChart />\r\n              </Route>\r\n              <Route exact path={match.url + `addcoin`} component={AddCoin}>\r\n                <AddCoin />\r\n              </Route>\r\n            </Switch>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\ErrorPage.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\AddCoin.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Snackbar.js",["78"],"export const SET_SNACKBAR = \"SET_SNACKBAR\";\r\n\r\nconst initialState = {\r\n  snackbarOpen: false,\r\n  snackbarType: \"success\",\r\n  snackbarMessage: \"\",\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_SNACKBAR:\r\n      const { snackbarOpen, snackbarMessage, snackbarType } = action;\r\n      return {\r\n        ...state,\r\n        snackbarOpen,\r\n        snackbarType,\r\n        snackbarMessage,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setSnackbar = (\r\n  snackbarOpen,\r\n  snackbarType = \"success\",\r\n  snackbarMessage = \"\"\r\n) => ({\r\n  type: SET_SNACKBAR,\r\n  snackbarOpen,\r\n  snackbarType,\r\n  snackbarMessage,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ConfigureStore.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CustomizedSnackBar.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\CoinDucks.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\rootSaga.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\CoinHandlers.js",["79","80"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\CoinMarketApiService.js",["81"],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":19},{"ruleId":"90","severity":1,"message":"91","line":243,"column":47,"nodeType":"92","messageId":"93","endLine":243,"endColumn":49},{"ruleId":"86","severity":1,"message":"94","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":12},{"ruleId":"86","severity":1,"message":"95","line":6,"column":3,"nodeType":"88","messageId":"89","endLine":6,"endColumn":13},{"ruleId":"86","severity":1,"message":"96","line":148,"column":33,"nodeType":"88","messageId":"89","endLine":148,"endColumn":37},{"ruleId":"97","severity":1,"message":"98","line":9,"column":1,"nodeType":"99","endLine":22,"endColumn":3},{"ruleId":"86","severity":1,"message":"100","line":1,"column":8,"nodeType":"88","messageId":"89","endLine":1,"endColumn":19},{"ruleId":"86","severity":1,"message":"101","line":2,"column":16,"nodeType":"88","messageId":"89","endLine":2,"endColumn":19},{"ruleId":null,"fatal":true,"severity":2,"message":"102","line":12,"column":15},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'CryptoChart' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'clsx' is defined but never used.","'IconButton' is defined but never used.","'icon' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'setSnackbar' is defined but never used.","'put' is defined but never used.","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 10 | \u001b[39m    \u001b[33m.\u001b[39mget(\u001b[33mAPI_URL\u001b[39m\u001b[33m,\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 11 | \u001b[39m      headers\u001b[33m:\u001b[39m { \u001b[32m\"X-CMC_PRO_API_KEY\"\u001b[39m\u001b[33m:\u001b[39m \u001b[32m\"554d8fe4-3311-4db0-8dfa-7d243d1e1de6\"\u001b[39m }\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 12 | \u001b[39m      params\u001b[33m:\u001b[39m \u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 13 | \u001b[39m    })\u001b[0m\n\u001b[0m \u001b[90m 14 | \u001b[39m    \u001b[33m.\u001b[39mthen((response) \u001b[33m=>\u001b[39m response)\u001b[0m\n\u001b[0m \u001b[90m 15 | \u001b[39m    \u001b[33m.\u001b[39m\u001b[36mcatch\u001b[39m((error) \u001b[33m=>\u001b[39m error)\u001b[33m;\u001b[39m\u001b[0m","no-global-assign","no-unsafe-negation"]