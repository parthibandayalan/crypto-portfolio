[{"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\index.js":"1","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\App.js":"2","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\reportWebVitals.js":"3","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoChart.jsx":"4","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\Chart.jsx":"5","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\LoginPage.jsx":"6","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Dashboard.jsx":"7","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\ErrorPage.jsx":"8","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\AddCoin.jsx":"9","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Snackbar.js":"10","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ConfigureStore.js":"11","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CustomizedSnackBar.jsx":"12","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\CoinDucks.js":"13","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\rootSaga.js":"14","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\CoinHandlers.js":"15","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\requests\\CoinRequest.js":"16","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\LightChartComponent.jsx":"17","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\BinanceHistoryDataAPI.js":"18","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\Authentication.js":"19","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Authentication.js":"20","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\requests\\Authentication.js":"21","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\PortfolioServices.js":"22"},{"size":817,"mtime":1610022568340,"results":"23","hashOfConfig":"24"},{"size":634,"mtime":1610024660329,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":8055,"mtime":1610028430310,"results":"27","hashOfConfig":"24"},{"size":174,"mtime":1609662732825,"results":"28","hashOfConfig":"24"},{"size":5026,"mtime":1610737890638,"results":"29","hashOfConfig":"24"},{"size":7399,"mtime":1610976199713,"results":"30","hashOfConfig":"24"},{"size":105,"mtime":1609682728654,"results":"31","hashOfConfig":"24"},{"size":1824,"mtime":1610024060167,"results":"32","hashOfConfig":"24"},{"size":861,"mtime":1610127501813,"results":"33","hashOfConfig":"24"},{"size":1457,"mtime":1610262632883,"results":"34","hashOfConfig":"24"},{"size":1424,"mtime":1610025246329,"results":"35","hashOfConfig":"24"},{"size":798,"mtime":1610985283985,"results":"36","hashOfConfig":"24"},{"size":614,"mtime":1610262477786,"results":"37","hashOfConfig":"24"},{"size":1650,"mtime":1610975701760,"results":"38","hashOfConfig":"24"},{"size":2801,"mtime":1610185375904,"results":"39","hashOfConfig":"24"},{"size":3442,"mtime":1610648521385,"results":"40","hashOfConfig":"24"},{"size":874,"mtime":1610975822889,"results":"41","hashOfConfig":"24"},{"size":2841,"mtime":1610738329167,"results":"42","hashOfConfig":"24"},{"size":902,"mtime":1610733371110,"results":"43","hashOfConfig":"24"},{"size":1487,"mtime":1610741599932,"results":"44","hashOfConfig":"24"},{"size":697,"mtime":1610649845626,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1kddrym",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\index.js",[],["96","97"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\App.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\reportWebVitals.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoChart.jsx",["98"],"import React, { Component } from \"react\";\r\nimport Chart from \"./Chart\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport { compose } from \"recompose\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst styles = (theme) => ({\r\n  \"chart-container\": {\r\n    height: 400,\r\n    width: 900,\r\n  },\r\n});\r\n\r\nclass CryptoChart extends Component {\r\n  /*constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pairing: this.props.location.state.coinCode + \"-USD\",\r\n      lineChartData: {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            type: \"line\",\r\n            label: this.props.location.state.coinCode + \"-USD\",\r\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n            borderColor: this.props.theme.palette.primary.main,\r\n            pointBackgroundColor: this.props.theme.palette.secondary.main,\r\n            pointBorderColor: this.props.theme.palette.secondary.main,\r\n            borderWidth: \"2\",\r\n            lineTension: 0.45,\r\n            data: [],\r\n          },\r\n        ],\r\n      },\r\n      lineChartOptions: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n          enabled: true,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 10,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n  }*/\r\n\r\n  state = {\r\n    pairing: this.props.location.state.coinCode + \"-USD\",\r\n    lineChartData: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          type: \"line\",\r\n          label: this.props.location.state.coinCode + \"-USD\",\r\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n          borderColor: this.props.theme.palette.primary.main,\r\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\r\n          pointBorderColor: this.props.theme.palette.secondary.main,\r\n          borderWidth: \"2\",\r\n          lineTension: 0.45,\r\n          data: [],\r\n        },\r\n      ],\r\n    },\r\n    lineChartOptions: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      tooltips: {\r\n        enabled: true,\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            ticks: {\r\n              autoSkip: true,\r\n              maxTicksLimit: 10,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"Rerender happend\");\r\n    this.ws = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\r\n    //this.createGDXSocket(this.props.location.state.coinCode);\r\n\r\n    const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n    const newBtcDataSet = { ...oldBtcDataSet };\r\n    newBtcDataSet.label = this.props.location.state.coinCode + \"-USD\";\r\n    const newChartData = {\r\n      ...this.state.lineChartData,\r\n      datasets: [newBtcDataSet],\r\n    };\r\n    console.log(\r\n      \"Inside Mounting Function : \" +\r\n        this.props.location.state.coinCode +\r\n        \"-USD\"\r\n    );\r\n\r\n    this.setState({\r\n      pairing: this.props.location.state.coinCode + \"-USD\",\r\n      lineChartData: newChartData,\r\n    });\r\n\r\n    const subscribe = {\r\n      type: \"subscribe\",\r\n      channels: [\r\n        {\r\n          name: \"ticker\",\r\n          product_ids: [this.state.pairing],\r\n        },\r\n      ],\r\n    };\r\n\r\n    this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };\r\n\r\n    //below code is replaced by a call to sendmessage function\r\n    /*this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };*/\r\n\r\n    this.ws.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n      console.log(\"value : \" + JSON.stringify(value));\r\n      if (value.type !== \"ticker\" || value.product_id !== this.state.pairing) {\r\n        return;\r\n      }\r\n      //console.log(\"value : \" + JSON.stringify(value));\r\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n      const newBtcDataSet = { ...oldBtcDataSet };\r\n      newBtcDataSet.data.push(value.price);\r\n      const newChartData = {\r\n        ...this.state.lineChartData,\r\n        datasets: [newBtcDataSet],\r\n        labels: this.state.lineChartData.labels.concat(\r\n          new Date().toLocaleTimeString()\r\n        ),\r\n      };\r\n      this.setState({ lineChartData: newChartData });\r\n    };\r\n  }\r\n\r\n  /*sendMessage = (msg) => {\r\n    // Wait until the state of the socket is not ready and send the message when it is...\r\n    waitForSocketConnection(function () {\r\n      this.ws.send(JSON.stringify(msg));\r\n      console.log(\" subscribe send : \" + JSON.stringify(msg));\r\n    });\r\n  };\r\n\r\n  // Make the function wait until the connection is made...\r\n  waitForSocketConnection = (callback) => {\r\n    setTimeout(function () {\r\n      if (this.ws.readyState === 1) {\r\n        console.log(\"Connection is made\");\r\n        if (callback != null) {\r\n          callback();\r\n        }\r\n      } else {\r\n        console.log(\"wait for connection...\");\r\n        waitForSocketConnection(callback);\r\n      }\r\n    }, 5); // wait 5 milisecond for the connection...\r\n  };*/\r\n\r\n  createGDXSocket(coinCode) {\r\n    const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n    const newBtcDataSet = { ...oldBtcDataSet };\r\n    newBtcDataSet.data = [];\r\n    newBtcDataSet.label = this.props.location.state.coinCode + \"-USD\";\r\n    const newChartData = {\r\n      ...this.state.lineChartData,\r\n      datasets: [newBtcDataSet],\r\n      labels: [],\r\n    };\r\n    console.log(\r\n      \"Inside GDX Socket Function : \" +\r\n        this.props.location.state.coinCode +\r\n        \"-USD\"\r\n    );\r\n    console.log(\"Check 1\");\r\n    this.setState({ pairing: this.props.location.state.coinCode + \"-USD\" });\r\n    this.setState({ lineChartData: newChartData });\r\n    console.log(\"Check 2\");\r\n    const subscribe = {\r\n      type: \"subscribe\",\r\n      channels: [\r\n        {\r\n          name: \"ticker\",\r\n          product_ids: [this.props.location.state.coinCode + \"-USD\"],\r\n        },\r\n      ],\r\n    };\r\n\r\n    if (this.ws.readyState === 1) {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    }\r\n\r\n    //below code is replaced by a call to sendmessage function\r\n    /*this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };\r\n\r\n    this.ws.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n      if (value.type !== \"ticker\") {\r\n        return;\r\n      }\r\n\r\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n      const newBtcDataSet = { ...oldBtcDataSet };\r\n      newBtcDataSet.data.push(value.price);\r\n      const newChartData = {\r\n        ...this.state.lineChartData,\r\n        datasets: [newBtcDataSet],\r\n        labels: this.state.lineChartData.labels.concat(\r\n          new Date().toLocaleTimeString()\r\n        ),\r\n      };\r\n      this.setState({ lineChartData: newChartData });\r\n    };*/\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    let newPairing = this.props.location.state.coinCode + \"-USD\";\r\n    let prevPairing = prevProps.location.state.coinCode + \"-USD\";\r\n    if (newPairing.localeCompare(prevPairing) != 0) {\r\n      //this.forceUpdate();\r\n      console.log(\"New State : \" + newPairing);\r\n      console.log(\"Previous State : \" + prevPairing);\r\n      console.log(\"Component updates\");\r\n      this.createGDXSocket(this.props.location.state.coinCode);\r\n      //this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.ws.close();\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <Card className={classes[\"chart-container\"]}>\r\n        <Chart\r\n          data={this.state.lineChartData}\r\n          options={this.state.lineChartOptions}\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  withStyles(styles, { withTheme: true })\r\n)(CryptoChart);\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\Chart.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\LoginPage.jsx",["99","100","101","102","103","104"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Dashboard.jsx",["105","106","107","108","109","110","111"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\ErrorPage.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\AddCoin.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Snackbar.js",["112"],"export const SET_SNACKBAR = \"SET_SNACKBAR\";\r\n\r\nconst initialState = {\r\n  snackbarOpen: false,\r\n  snackbarType: \"success\",\r\n  snackbarMessage: \"\",\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_SNACKBAR:\r\n      const { snackbarOpen, snackbarMessage, snackbarType } = action;\r\n      /*console.log(\r\n        \"SET SNACKBAR Reducer\" +\r\n          snackbarOpen +\r\n          \" \" +\r\n          snackbarMessage +\r\n          \" \" +\r\n          snackbarType\r\n      );*/\r\n      return {\r\n        ...state,\r\n        snackbarOpen,\r\n        snackbarType,\r\n        snackbarMessage,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setSnackbar = (\r\n  snackbarOpen,\r\n  snackbarType = \"success\",\r\n  snackbarMessage = \"\"\r\n) => ({\r\n  type: SET_SNACKBAR,\r\n  snackbarOpen,\r\n  snackbarType,\r\n  snackbarMessage,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ConfigureStore.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CustomizedSnackBar.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\CoinDucks.js",["113"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\rootSaga.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\CoinHandlers.js",["114"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\requests\\CoinRequest.js",["115","116"],"import { CoinbasePro } from \"coinbase-pro-node\";\r\nimport Binance from \"node-binance-api\";\r\n\r\n/*export default async function checkSymbolBinanceApi(symbol) {\r\n  const pairing = symbol + \"USDT\";\r\n\r\n  try {\r\n    let ticker = await binance.prices(pairing);\r\n    console.info(\"Price of BTC : \", ticker[pairing]);\r\n  } catch (error) {\r\n    throw \"Coin not supported\";\r\n  }\r\n  //    (error, ticker) => {\r\n  //     try {\r\n  //       console.info(\"Price of BTC : \", ticker[pairing] + \" Error : \" + error);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //       throw \"Coin not supported\";\r\n  //     }});\r\n}\r\n\r\nexport default function checkSymbolWebSocket(symbol) {\r\n  //const {CoinbasePro} = require('coinbase-pro-node');\r\n\r\n  const auth = {\r\n    apiKey: \"c667149b215cea51d41da304fb8f70dd\",\r\n    apiSecret:\r\n      \"9/R0ZPeb6pM1Jg8CFQw7irZ+nAoec5O9LxGPY0YMFqydS1kF+7+DkK8/d05wbHrAlmxrQND4WupFYp3VOyB8Vg==\",\r\n    passphrase: \"pleasework\",\r\n    // The Sandbox is for testing only and offers a subset of the products/assets:\r\n    // https://docs.pro.coinbase.com/#sandbox\r\n    useSandbox: false,\r\n  };\r\n\r\n  const client = new CoinbasePro(auth);\r\n\r\n  client.rest.account.listAccounts().then((accounts) => {\r\n    const message = `You can trade \"${accounts.length}\" different pairs.`;\r\n    console.log(message);\r\n  });\r\n\r\n  client.rest.product\r\n    .getProducts()\r\n    .then((product) => {\r\n      console.log(JSON.stringify(product));\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Error Caught : \" + error);\r\n    });\r\n}\r\n\r\n\r\n\r\nfunction sleep(miliseconds) {\r\n  var currentTime = new Date().getTime();\r\n\r\n  while (currentTime + miliseconds >= new Date().getTime()) {\r\n    console.log(\"Timer Running\");\r\n  }\r\n}\r\n\r\nexport default async function checkSymbolWebSocket(strSymbol) {\r\n  var ws = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\r\n  const subscribe = {\r\n    type: \"subscribe\",\r\n    channels: [\r\n      {\r\n        name: \"ticker\",\r\n        product_ids: strSymbol + \"-USD\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  var subscriptionReplied = false;\r\n\r\n  ws.onopen = () => {\r\n    ws.send(JSON.stringify(subscribe));\r\n    console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n  };\r\n\r\n  ws.onmessage = (e) => {\r\n    subscriptionReplied = true;\r\n    //JSON.parse(e.data.type);\r\n    const value = JSON.parse(e.data);\r\n    console.log(\"Inside Machine\");\r\n    console.log(JSON.stringify(value));\r\n    if (value.type == \"subscriptions\") {\r\n      //ws.close();\r\n    } else if (e.data.type == \"error\") {\r\n      ws.close();\r\n      throw \"Invalid Symbol or Symbol not Supported\";\r\n    }\r\n  };\r\n\r\n  for (let i = 0; i < 10; ++i) {\r\n    if (subscriptionReplied == true) {\r\n      console.log(JSON.stringify(subscriptionReplied));\r\n      return;\r\n    }\r\n    await sleep(300);\r\n  }\r\n  throw \"Socket Issue : \";\r\n}*/\r\n",["117","118"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\LightChartComponent.jsx",["119"],"import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"kaktana-react-lightweight-charts\";\r\nimport getHistoricalData from \"./../services/BinanceHistoryDataAPI\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function LightChartComponent() {\r\n  // URL connection\r\n  /*const miniTicker = new WebSocket(\r\n    \"wss://dex.binance.org/api/ws/BNB_BTCB-1D@miniTicker\"\r\n  );*/\r\n\r\n  // Or Subscribe method\r\n\r\n  const location = useLocation();\r\n\r\n  const options = {\r\n    alignLabels: true,\r\n    timeScale: {\r\n      rightOffset: 12,\r\n      barSpacing: 3,\r\n      fixLeftEdge: true,\r\n      lockVisibleTimeRangeOnResize: true,\r\n      rightBarStaysOnScroll: true,\r\n      borderVisible: false,\r\n      borderColor: \"#fff000\",\r\n      visible: true,\r\n      timeVisible: true,\r\n      secondsVisible: false,\r\n    },\r\n  };\r\n\r\n  const [lineSeries, setLineSeries] = useState([\r\n    {\r\n      data: [],\r\n    },\r\n  ]);\r\n\r\n  /////below code is for getting historical data and setting up the lineSeries data\r\n  /* {\r\n          time: \"2018-10-19\",\r\n          value: 180.34,\r\n        },\r\n        {\r\n          time: \"2018-10-22\",\r\n          value: 180.82,\r\n        },\r\n        {\r\n          time: \"2018-10-23\",\r\n          value: 175.77,\r\n        },\r\n        {\r\n          time: \"2018-10-24\",\r\n          value: 178.58,\r\n        },\r\n        {\r\n          time: \"2018-10-25\",\r\n          value: 177.52,\r\n        },\r\n        {\r\n          time: \"2018-10-26\",\r\n          value: 176.88,\r\n        },\r\n        {\r\n          time: \"2018-10-29\",\r\n          value: 173.74,\r\n        },\r\n        {\r\n          time: \"2018-10-30\",\r\n          value: 173.16,\r\n        },\r\n        {\r\n          time: \"2018-10-31\",\r\n          value: 177.98,\r\n        },\r\n        const lineSeries = [\r\n    {\r\n      data: [],\r\n    },\r\n  ];*/\r\n\r\n  useEffect(() => {\r\n    //lineSeries[0][\"data\"].push(incomingData);\r\n    // console.log(\r\n    //   lineSeries[0][\"data\"].push({ time: \"2018-11-01\", value: 180.98 })\r\n    // );\r\n    getHistoricalData(location.state.coinCode)\r\n      .then((incD) => {\r\n        //console.log(\"received by the component : \" + JSON.stringify(incD));\r\n        //setIncomingData(incD);\r\n        const oldLineData = lineSeries[0][\"data\"];\r\n        const newLineSeries = [\r\n          {\r\n            data: [...oldLineData, ...incD],\r\n          },\r\n        ];\r\n        setLineSeries(newLineSeries);\r\n        //console.log(\"received by the component : \");\r\n        //console.log(newLineSeries);\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }, [location.state.coinCode]);\r\n\r\n  //////////below code is for websocket\r\n\r\n  const API_WS =\r\n    \"wss://stream.binance.com:9443/ws/\" +\r\n    location.state.coinCode +\r\n    \"usdt@kline_10m\";\r\n  const conn = new WebSocket(API_WS);\r\n\r\n  conn.onmessage = (e) => {\r\n    console.log(\"value : \");\r\n    console.log(e.data);\r\n    var newKlineMap = JSON.parse(e.data);\r\n    const newPoint = {\r\n      time: newKlineMap.k.t / 1000,\r\n      value: parseFloat(newKlineMap.k.o),\r\n    };\r\n\r\n    console.log(newKlineMap.k.t + \" \" + newKlineMap.k.o);\r\n    console.log(\"Value : \" + newPoint.value);\r\n    const oldLineData = lineSeries[0][\"data\"];\r\n    const newLineSeries = [\r\n      {\r\n        data: [...oldLineData, newPoint],\r\n      },\r\n    ];\r\n    setLineSeries(newLineSeries);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Chart options={options} lineSeries={lineSeries} autoWidth height={800} />\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\BinanceHistoryDataAPI.js",["120"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\Authentication.js",["121","122","123"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Authentication.js",["124"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\requests\\Authentication.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\PortfolioServices.js",[],{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":244,"column":47,"nodeType":"131","messageId":"132","endLine":244,"endColumn":49},{"ruleId":"133","severity":1,"message":"134","line":1,"column":17,"nodeType":"135","messageId":"136","endLine":1,"endColumn":26},{"ruleId":"133","severity":1,"message":"137","line":6,"column":3,"nodeType":"135","messageId":"136","endLine":6,"endColumn":7},{"ruleId":"133","severity":1,"message":"138","line":7,"column":3,"nodeType":"135","messageId":"136","endLine":7,"endColumn":14},{"ruleId":"133","severity":1,"message":"139","line":8,"column":3,"nodeType":"135","messageId":"136","endLine":8,"endColumn":12},{"ruleId":"133","severity":1,"message":"140","line":12,"column":3,"nodeType":"135","messageId":"136","endLine":12,"endColumn":11},{"ruleId":"141","severity":1,"message":"142","line":47,"column":22,"nodeType":"143","endLine":47,"endColumn":26},{"ruleId":"133","severity":1,"message":"144","line":3,"column":8,"nodeType":"135","messageId":"136","endLine":3,"endColumn":12},{"ruleId":"133","severity":1,"message":"145","line":6,"column":3,"nodeType":"135","messageId":"136","endLine":6,"endColumn":13},{"ruleId":"133","severity":1,"message":"146","line":104,"column":9,"nodeType":"135","messageId":"136","endLine":104,"endColumn":17},{"ruleId":"147","severity":1,"message":"148","line":115,"column":18,"nodeType":"149","messageId":"150","endLine":119,"endColumn":13},{"ruleId":"141","severity":1,"message":"151","line":125,"column":6,"nodeType":"152","endLine":125,"endColumn":20,"suggestions":"153"},{"ruleId":"133","severity":1,"message":"154","line":127,"column":9,"nodeType":"135","messageId":"136","endLine":127,"endColumn":21},{"ruleId":"133","severity":1,"message":"155","line":179,"column":35,"nodeType":"135","messageId":"136","endLine":179,"endColumn":39},{"ruleId":"156","severity":1,"message":"157","line":9,"column":1,"nodeType":"158","endLine":30,"endColumn":3},{"ruleId":"156","severity":1,"message":"157","line":8,"column":1,"nodeType":"158","endLine":24,"endColumn":3},{"ruleId":"159","severity":1,"message":"160","line":16,"column":7,"nodeType":"161","messageId":"162","endLine":16,"endColumn":34},{"ruleId":"133","severity":1,"message":"163","line":1,"column":10,"nodeType":"135","messageId":"136","endLine":1,"endColumn":21},{"ruleId":"133","severity":1,"message":"164","line":2,"column":8,"nodeType":"135","messageId":"136","endLine":2,"endColumn":15},{"ruleId":"125","replacedBy":"165"},{"ruleId":"127","replacedBy":"166"},{"ruleId":"141","severity":1,"message":"167","line":103,"column":6,"nodeType":"152","endLine":103,"endColumn":31,"suggestions":"168"},{"ruleId":"159","severity":1,"message":"160","line":29,"column":7,"nodeType":"161","messageId":"162","endLine":29,"endColumn":30},{"ruleId":"133","severity":1,"message":"169","line":8,"column":26,"nodeType":"135","messageId":"136","endLine":8,"endColumn":33},{"ruleId":"133","severity":1,"message":"170","line":9,"column":8,"nodeType":"135","messageId":"136","endLine":9,"endColumn":13},{"ruleId":"133","severity":1,"message":"146","line":45,"column":9,"nodeType":"135","messageId":"136","endLine":45,"endColumn":17},{"ruleId":"156","severity":1,"message":"157","line":32,"column":1,"nodeType":"158","endLine":40,"endColumn":3},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'CardContent' is defined but never used.","'FormGroup' is defined but never used.","'MenuItem' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'errorVisible' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'clsx' is defined but never used.","'IconButton' is defined but never used.","'username' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'coin', 'coin'.","ArrowFunctionExpression","unsafeRefs","React Hook useEffect has missing dependencies: 'coins' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["173"],"'handleLogout' is assigned a value but never used.","'icon' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'CoinbasePro' is defined but never used.","'Binance' is defined but never used.",["171"],["172"],"React Hook useEffect has a missing dependency: 'lineSeries'. Either include it or remove the dependency array.",["174"],"'refresh' is defined but never used.","'store' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [coins, coins.length, history]",{"range":"179","text":"180"},"Update the dependencies array to be: [lineSeries, location.state.coinCode]",{"range":"181","text":"182"},[3338,3352],"[coins, coins.length, history]",[2548,2573],"[lineSeries, location.state.coinCode]"]