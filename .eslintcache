[{"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\index.js":"1","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\App.js":"2","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\reportWebVitals.js":"3","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ConfigureStore.js":"4","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Authentication.js":"5","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Snackbar.js":"6","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\CoinDucks.js":"7","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\rootSaga.js":"8","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\ErrorPage.jsx":"9","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CustomizedSnackBar.jsx":"10","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\LoginPage.jsx":"11","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Dashboard.jsx":"12","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\CoinHandlers.js":"13","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\Authentication.js":"14","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\LightChartComponent.jsx":"15","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoChart.jsx":"16","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\AddCoin.jsx":"17","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\PortfolioCards.jsx":"18","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\BinanceHistoryDataAPI.js":"19","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\PortfolioServices.js":"20","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\requests\\Authentication.js":"21","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\Chart.jsx":"22","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoCard.jsx":"23","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Trigger.js":"24","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\TotalValueDucks.js":"25","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\TotalPortfolioValue.jsx":"26","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\RealTimeChart.jsx":"27","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Registration.jsx":"28","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\IdleTimerComponent.jsx":"29","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\IdleTimerDialog.jsx":"30"},{"size":817,"mtime":1610022568340,"results":"31","hashOfConfig":"32"},{"size":1030,"mtime":1612689918839,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":499162500000,"results":"34","hashOfConfig":"32"},{"size":1615,"mtime":1611938428249,"results":"35","hashOfConfig":"32"},{"size":902,"mtime":1610733371110,"results":"36","hashOfConfig":"32"},{"size":861,"mtime":1610127501813,"results":"37","hashOfConfig":"32"},{"size":1305,"mtime":1612416877991,"results":"38","hashOfConfig":"32"},{"size":711,"mtime":1612422743411,"results":"39","hashOfConfig":"32"},{"size":105,"mtime":1609682728654,"results":"40","hashOfConfig":"32"},{"size":1424,"mtime":1610025246329,"results":"41","hashOfConfig":"32"},{"size":4996,"mtime":1612193771963,"results":"42","hashOfConfig":"32"},{"size":8995,"mtime":1612692217785,"results":"43","hashOfConfig":"32"},{"size":3090,"mtime":1612421013642,"results":"44","hashOfConfig":"32"},{"size":2986,"mtime":1612691752209,"results":"45","hashOfConfig":"32"},{"size":3515,"mtime":1611312381665,"results":"46","hashOfConfig":"32"},{"size":8055,"mtime":1610028430310,"results":"47","hashOfConfig":"32"},{"size":1915,"mtime":1611929384922,"results":"48","hashOfConfig":"32"},{"size":2219,"mtime":1611939944338,"results":"49","hashOfConfig":"32"},{"size":1513,"mtime":1611331713499,"results":"50","hashOfConfig":"32"},{"size":1997,"mtime":1612421974672,"results":"51","hashOfConfig":"32"},{"size":1941,"mtime":1611671385542,"results":"52","hashOfConfig":"32"},{"size":174,"mtime":1609662732825,"results":"53","hashOfConfig":"32"},{"size":2343,"mtime":1611939502865,"results":"54","hashOfConfig":"32"},{"size":559,"mtime":1611925655923,"results":"55","hashOfConfig":"32"},{"size":1058,"mtime":1611938631370,"results":"56","hashOfConfig":"32"},{"size":1433,"mtime":1612693937330,"results":"57","hashOfConfig":"32"},{"size":7059,"mtime":1612444958015,"results":"58","hashOfConfig":"32"},{"size":6371,"mtime":1612183782986,"results":"59","hashOfConfig":"32"},{"size":2257,"mtime":1612621163364,"results":"60","hashOfConfig":"32"},{"size":2250,"mtime":1612691801851,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"16a2n06",{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"64"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"64"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\index.js",[],["139","140"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\App.js",["141"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\reportWebVitals.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ConfigureStore.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Authentication.js",["142"],"export const LOGIN_USER = \"LOGIN_USER\";\r\nexport const LOGOUT_USER = \"LOGOUT_USER\";\r\nexport const REFRESH_TOKEN = \"REFRESH_TOKEN\";\r\nconst SET_AUTHENTICATED = \"SET_AUTHENTICATED\";\r\n\r\nexport const loginUser = (data) => ({\r\n  type: LOGIN_USER,\r\n  payload: data,\r\n});\r\n\r\nexport const logoutUser = () => ({\r\n  type: LOGOUT_USER,\r\n});\r\n\r\nexport const refreshToken = () => ({\r\n  type: REFRESH_TOKEN,\r\n});\r\n\r\nexport const setAuthenticated = (authenticated, username, name) => ({\r\n  type: SET_AUTHENTICATED,\r\n  authenticated,\r\n  username,\r\n  name,\r\n});\r\n\r\nconst initialState = {\r\n  authenticated: false,\r\n  username: null,\r\n  name: null,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_AUTHENTICATED:\r\n      const { authenticated, username, name } = action;\r\n      return { ...state, authenticated, username, name };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Snackbar.js",["143"],"export const SET_SNACKBAR = \"SET_SNACKBAR\";\r\n\r\nconst initialState = {\r\n  snackbarOpen: false,\r\n  snackbarType: \"success\",\r\n  snackbarMessage: \"\",\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_SNACKBAR:\r\n      const { snackbarOpen, snackbarMessage, snackbarType } = action;\r\n      /*console.log(\r\n        \"SET SNACKBAR Reducer\" +\r\n          snackbarOpen +\r\n          \" \" +\r\n          snackbarMessage +\r\n          \" \" +\r\n          snackbarType\r\n      );*/\r\n      return {\r\n        ...state,\r\n        snackbarOpen,\r\n        snackbarType,\r\n        snackbarMessage,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setSnackbar = (\r\n  snackbarOpen,\r\n  snackbarType = \"success\",\r\n  snackbarMessage = \"\"\r\n) => ({\r\n  type: SET_SNACKBAR,\r\n  snackbarOpen,\r\n  snackbarType,\r\n  snackbarMessage,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\CoinDucks.js",["144","145"],"export const CHECK_COIN = \"CHECK_COIN\";\r\nexport const REMOVE_COIN_REQ = \"REMOVE_COIN_REQ\";\r\nconst ADD_COIN = \"ADD_COIN\";\r\nconst REMOVE_COIN = \"REMOVE_COIN\";\r\nconst RESET_COIN = \"RESET_COIN\";\r\n\r\nconst intialState = {\r\n  coins: {},\r\n};\r\n\r\nexport default (state = intialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_COIN:\r\n      let { symbol, token } = action;\r\n      //console.log(\"ADD COIN Reducer \" + symbol + \" \" + token);\r\n      //const newMap = state.coins.set(symbol, token);\r\n      var newState = {\r\n        coins: { ...state.coins },\r\n      };\r\n      newState.coins[symbol] = token;\r\n      return newState;\r\n    case REMOVE_COIN:\r\n      delete state.coins[action.symbol];\r\n      var newState = {\r\n        coins: { ...state.coins },\r\n      };\r\n      return newState;\r\n    case RESET_COIN:\r\n      return intialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const checkCoin = (symbol, token) => ({\r\n  type: CHECK_COIN,\r\n  symbol,\r\n  token,\r\n});\r\n\r\nexport const addCoin = (symbol, token) => ({\r\n  type: ADD_COIN,\r\n  symbol,\r\n  token,\r\n});\r\n\r\nexport const removeCoin = (symbol) => ({\r\n  type: REMOVE_COIN,\r\n  symbol,\r\n});\r\n\r\nexport const removeCoinReq = (symbol) => ({\r\n  type: REMOVE_COIN_REQ,\r\n  symbol,\r\n});\r\n\r\nexport const resetCoins = () => ({\r\n  type: RESET_COIN,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\rootSaga.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\ErrorPage.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CustomizedSnackBar.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\LoginPage.jsx",["146","147","148","149","150","151"],"import React, { Component, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginUser } from \"../redux/ducks/Authentication\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  FormGroup,\r\n  Typography,\r\n  TextField,\r\n  Paper,\r\n  MenuItem,\r\n  Box,\r\n  Button,\r\n  Grid,\r\n  makeStyles,\r\n  Link,\r\n} from \"@material-ui/core\";\r\nimport { ErrorMessage, Form, Formik, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst initialValues = {\r\n  username: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  loginPaper: {\r\n    height: \"90vh\",\r\n  },\r\n  buttonBlock: {\r\n    width: \"70%\",\r\n  },\r\n});\r\n\r\nexport default function LoginPage() {\r\n  let errorVisible = false;\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector((state) => state.auth.authenticated);\r\n\r\n  useEffect(() => {\r\n    console.log(\"use effect : \" + auth);\r\n    if (auth) history.push(\"/\");\r\n    else {\r\n      errorVisible = true;\r\n      console.log(\"value changed: \" + errorVisible);\r\n    }\r\n  }, [auth]);\r\n\r\n  //console.log(classes);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={0} direction=\"row\" justify=\"center\">\r\n        <Grid\r\n          item\r\n          container\r\n          spacing={2}\r\n          direction=\"column\"\r\n          xs={2}\r\n          justify=\"center\"\r\n          className={classes.loginPaper}\r\n        >\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={Yup.object().shape({\r\n              username: Yup.string().required(\"Username is required\"),\r\n              password: Yup.string().required(\"Password is required\"),\r\n            })}\r\n            onSubmit={(values, formikHelpers) => {\r\n              // console.log(\"Submition Done\");\r\n              // console.log(values);\r\n              dispatch(loginUser(values));\r\n              //dispatch(loginUser(values));\r\n              // errorVisible = true;\r\n              // console.log(\"dispatch done outside :\" + auth);\r\n            }}\r\n          >\r\n            {({ values, errors, isSubmitting, isValidating }) => (\r\n              <Paper\r\n                variant=\"elevation\"\r\n                elevation={2}\r\n                style={{\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                <Grid item>\r\n                  <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"center\"\r\n                  spacing={2}\r\n                >\r\n                  <Form>\r\n                    <Grid item>\r\n                      <Field\r\n                        required\r\n                        name=\"username\"\r\n                        type=\"string\"\r\n                        as={TextField}\r\n                        label=\"Username\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <ErrorMessage name=\"username\" />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Field\r\n                        required\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        as={TextField}\r\n                        label=\"Password\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <ErrorMessage name=\"password\" />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      {!auth && errorVisible && (\r\n                        <div>Invalid Username or password</div>\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Box marginBottom={2}>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          type=\"submit\"\r\n                          disabled={isSubmitting || isValidating}\r\n                          className={classes.buttonBlock}\r\n                        >\r\n                          Submit\r\n                        </Button>\r\n                      </Box>\r\n                    </Grid>\r\n                    {/* <Box marginBottom={2}>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        type=\"reset\"\r\n                        disabled={isSubmitting || isValidating}\r\n                      >\r\n                        Reset\r\n                      </Button>\r\n                    </Box> */}\r\n                  </Form>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link href=\"#\" variant=\"body2\">\r\n                    Forgot Password?\r\n                  </Link>\r\n                </Grid>\r\n              </Paper>\r\n            )}\r\n          </Formik>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Dashboard.jsx",["152","153","154","155","156"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\CoinHandlers.js",["157"],"import { setSnackbar } from \"../../ducks/Snackbar\";\r\nimport { addCoin, removeCoin } from \"../../ducks/CoinDucks\";\r\nimport { setTrigger } from \"../../ducks/Trigger\";\r\nimport { call, put } from \"redux-saga/effects\";\r\nimport getHistoricalData from \"../../../services/BinanceHistoryDataAPI\";\r\nimport {\r\n  addCoinToDb,\r\n  removeCoinFromDb,\r\n} from \"../../../services/PortfolioServices\";\r\n\r\nexport function* handleCheckCoin(action) {\r\n  //yield put(setSnackbar(true, \"success\", \"Your coin is added\"));\r\n  try {\r\n    console.log(\"Check Coin caught\" + JSON.stringify(action));\r\n    const { symbol, token } = action;\r\n    console.log(\r\n      \"Symbol : \" + JSON.stringify(symbol) + \" Token \" + JSON.stringify(token)\r\n    );\r\n    if (isNaN(token) || Number(token) < 0) {\r\n      throw \"Enter Valid Number\";\r\n    }\r\n    //const response = yield call(checkSymbol, symbol);\r\n    //yield call(checkSymbolBinanceApi, symbol);\r\n    yield call(getHistoricalData, symbol);\r\n    //console.log(\"Response : \" + JSON.stringify(response));\r\n    const serializedState = localStorage.getItem(\"state\");\r\n    if (serializedState != null) {\r\n      const state = JSON.parse(serializedState);\r\n      console.log(\"Local Storage : \" + JSON.stringify(state.auth.username));\r\n      const payload = {\r\n        coin: symbol,\r\n        tokens: token,\r\n        username: state.auth.username,\r\n      };\r\n      if (state.auth.authenticated) {\r\n        console.log(\"Coin added to database\");\r\n        yield call(addCoinToDb, payload);\r\n      }\r\n    }\r\n\r\n    yield put(addCoin(symbol, token));\r\n    yield put(setTrigger());\r\n    yield put(setSnackbar(true, \"success\", \"Your coin is added\"));\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(setSnackbar(true, \"error\", JSON.stringify(error)));\r\n  }\r\n}\r\n\r\n///////////Remove Coin Request Handler\r\nexport function* handleRemoveCoinReq(action) {\r\n  //yield put(setSnackbar(true, \"success\", \"Your coin is added\"));\r\n  try {\r\n    console.log(\"Ramove Coin caught\" + JSON.stringify(action));\r\n    const { symbol, token } = action;\r\n    console.log(\r\n      \"Symbol : \" + JSON.stringify(symbol) + \" Token \" + JSON.stringify(token)\r\n    );\r\n\r\n    //const response = yield call(checkSymbol, symbol);\r\n    //yield call(checkSymbolBinanceApi, symbol);\r\n    //yield call(getHistoricalData, symbol);\r\n    //console.log(\"Response : \" + JSON.stringify(response));\r\n    const serializedState = localStorage.getItem(\"state\");\r\n    if (serializedState != null) {\r\n      const state = JSON.parse(serializedState);\r\n      console.log(\"Local Storage : \" + JSON.stringify(state.auth.username));\r\n      const payload = {\r\n        coin: symbol,\r\n        username: state.auth.username,\r\n      };\r\n      if (state.auth.authenticated) {\r\n        console.log(\"Coin added to database\");\r\n        yield call(removeCoinFromDb, payload);\r\n      }\r\n    }\r\n\r\n    yield put(removeCoin(symbol));\r\n    yield put(setTrigger());\r\n    yield put(setSnackbar(true, \"success\", \"Coin is removed\"));\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(setSnackbar(true, \"error\", JSON.stringify(error)));\r\n  }\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\handlers\\Authentication.js",["158","159","160"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\LightChartComponent.jsx",["161"],"import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"kaktana-react-lightweight-charts\";\r\nimport getHistoricalData from \"./../services/BinanceHistoryDataAPI\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function LightChartComponent() {\r\n  // URL connection\r\n  /*const miniTicker = new WebSocket(\r\n    \"wss://dex.binance.org/api/ws/BNB_BTCB-1D@miniTicker\"\r\n  );*/\r\n\r\n  // Or Subscribe method\r\n\r\n  const location = useLocation();\r\n\r\n  //console.log(JSON.stringify(location.state.coinCode));\r\n\r\n  const options = {\r\n    alignLabels: true,\r\n    timeScale: {\r\n      rightOffset: 12,\r\n      barSpacing: 3,\r\n      fixLeftEdge: true,\r\n      lockVisibleTimeRangeOnResize: true,\r\n      rightBarStaysOnScroll: true,\r\n      borderVisible: false,\r\n      borderColor: \"#fff000\",\r\n      visible: true,\r\n      timeVisible: true,\r\n      secondsVisible: false,\r\n    },\r\n  };\r\n\r\n  const [lineSeries, setLineSeries] = useState([\r\n    {\r\n      data: [],\r\n    },\r\n  ]);\r\n\r\n  /////below code is for getting historical data and setting up the lineSeries data\r\n  /* {\r\n          time: \"2018-10-19\",\r\n          value: 180.34,\r\n        },\r\n        {\r\n          time: \"2018-10-22\",\r\n          value: 180.82,\r\n        },\r\n        {\r\n          time: \"2018-10-23\",\r\n          value: 175.77,\r\n        },\r\n        {\r\n          time: \"2018-10-24\",\r\n          value: 178.58,\r\n        },\r\n        {\r\n          time: \"2018-10-25\",\r\n          value: 177.52,\r\n        },\r\n        {\r\n          time: \"2018-10-26\",\r\n          value: 176.88,\r\n        },\r\n        {\r\n          time: \"2018-10-29\",\r\n          value: 173.74,\r\n        },\r\n        {\r\n          time: \"2018-10-30\",\r\n          value: 173.16,\r\n        },\r\n        {\r\n          time: \"2018-10-31\",\r\n          value: 177.98,\r\n        },\r\n        const lineSeries = [\r\n    {\r\n      data: [],\r\n    },\r\n  ];*/\r\n\r\n  useEffect(() => {\r\n    //lineSeries[0][\"data\"].push(incomingData);\r\n    // console.log(\r\n    //   lineSeries[0][\"data\"].push({ time: \"2018-11-01\", value: 180.98 })\r\n    // );\r\n    getHistoricalData(location.state.coinCode)\r\n      .then((incD) => {\r\n        //console.log(\"received by the component : \" + JSON.stringify(incD));\r\n        //setIncomingData(incD);\r\n        const oldLineData = lineSeries[0][\"data\"];\r\n        const newLineSeries = [\r\n          {\r\n            data: [...oldLineData, ...incD],\r\n          },\r\n        ];\r\n        setLineSeries(newLineSeries);\r\n        //console.log(\"received by the component : \");\r\n        //console.log(newLineSeries);\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }, [location.state.coinCode]);\r\n\r\n  //////////below code is for websocket\r\n\r\n  const API_WS =\r\n    \"wss://stream.binance.com:9443/ws/\" +\r\n    location.state.coinCode +\r\n    \"usdt@kline_10m\";\r\n  const conn = new WebSocket(API_WS);\r\n\r\n  conn.onmessage = (e) => {\r\n    // console.log(\"value : \");\r\n    // console.log(e.data);\r\n    var newKlineMap = JSON.parse(e.data);\r\n    const newPoint = {\r\n      time: newKlineMap.k.t / 1000,\r\n      value: parseFloat(newKlineMap.k.o),\r\n    };\r\n\r\n    // console.log(newKlineMap.k.t + \" \" + newKlineMap.k.o);\r\n    // console.log(\"Value : \" + newPoint.value);\r\n    const oldLineData = lineSeries[0][\"data\"];\r\n    const newLineSeries = [\r\n      {\r\n        data: [...oldLineData, newPoint],\r\n      },\r\n    ];\r\n    setLineSeries(newLineSeries);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Chart options={options} lineSeries={lineSeries} autoWidth height={800} />\r\n    </div>\r\n  );\r\n}\r\n",["162","163"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoChart.jsx",["164"],"import React, { Component } from \"react\";\r\nimport Chart from \"./Chart\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport { compose } from \"recompose\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst styles = (theme) => ({\r\n  \"chart-container\": {\r\n    height: 400,\r\n    width: 900,\r\n  },\r\n});\r\n\r\nclass CryptoChart extends Component {\r\n  /*constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pairing: this.props.location.state.coinCode + \"-USD\",\r\n      lineChartData: {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            type: \"line\",\r\n            label: this.props.location.state.coinCode + \"-USD\",\r\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n            borderColor: this.props.theme.palette.primary.main,\r\n            pointBackgroundColor: this.props.theme.palette.secondary.main,\r\n            pointBorderColor: this.props.theme.palette.secondary.main,\r\n            borderWidth: \"2\",\r\n            lineTension: 0.45,\r\n            data: [],\r\n          },\r\n        ],\r\n      },\r\n      lineChartOptions: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n          enabled: true,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 10,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n  }*/\r\n\r\n  state = {\r\n    pairing: this.props.location.state.coinCode + \"-USD\",\r\n    lineChartData: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          type: \"line\",\r\n          label: this.props.location.state.coinCode + \"-USD\",\r\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n          borderColor: this.props.theme.palette.primary.main,\r\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\r\n          pointBorderColor: this.props.theme.palette.secondary.main,\r\n          borderWidth: \"2\",\r\n          lineTension: 0.45,\r\n          data: [],\r\n        },\r\n      ],\r\n    },\r\n    lineChartOptions: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      tooltips: {\r\n        enabled: true,\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            ticks: {\r\n              autoSkip: true,\r\n              maxTicksLimit: 10,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"Rerender happend\");\r\n    this.ws = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\r\n    //this.createGDXSocket(this.props.location.state.coinCode);\r\n\r\n    const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n    const newBtcDataSet = { ...oldBtcDataSet };\r\n    newBtcDataSet.label = this.props.location.state.coinCode + \"-USD\";\r\n    const newChartData = {\r\n      ...this.state.lineChartData,\r\n      datasets: [newBtcDataSet],\r\n    };\r\n    console.log(\r\n      \"Inside Mounting Function : \" +\r\n        this.props.location.state.coinCode +\r\n        \"-USD\"\r\n    );\r\n\r\n    this.setState({\r\n      pairing: this.props.location.state.coinCode + \"-USD\",\r\n      lineChartData: newChartData,\r\n    });\r\n\r\n    const subscribe = {\r\n      type: \"subscribe\",\r\n      channels: [\r\n        {\r\n          name: \"ticker\",\r\n          product_ids: [this.state.pairing],\r\n        },\r\n      ],\r\n    };\r\n\r\n    this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };\r\n\r\n    //below code is replaced by a call to sendmessage function\r\n    /*this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };*/\r\n\r\n    this.ws.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n      console.log(\"value : \" + JSON.stringify(value));\r\n      if (value.type !== \"ticker\" || value.product_id !== this.state.pairing) {\r\n        return;\r\n      }\r\n      //console.log(\"value : \" + JSON.stringify(value));\r\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n      const newBtcDataSet = { ...oldBtcDataSet };\r\n      newBtcDataSet.data.push(value.price);\r\n      const newChartData = {\r\n        ...this.state.lineChartData,\r\n        datasets: [newBtcDataSet],\r\n        labels: this.state.lineChartData.labels.concat(\r\n          new Date().toLocaleTimeString()\r\n        ),\r\n      };\r\n      this.setState({ lineChartData: newChartData });\r\n    };\r\n  }\r\n\r\n  /*sendMessage = (msg) => {\r\n    // Wait until the state of the socket is not ready and send the message when it is...\r\n    waitForSocketConnection(function () {\r\n      this.ws.send(JSON.stringify(msg));\r\n      console.log(\" subscribe send : \" + JSON.stringify(msg));\r\n    });\r\n  };\r\n\r\n  // Make the function wait until the connection is made...\r\n  waitForSocketConnection = (callback) => {\r\n    setTimeout(function () {\r\n      if (this.ws.readyState === 1) {\r\n        console.log(\"Connection is made\");\r\n        if (callback != null) {\r\n          callback();\r\n        }\r\n      } else {\r\n        console.log(\"wait for connection...\");\r\n        waitForSocketConnection(callback);\r\n      }\r\n    }, 5); // wait 5 milisecond for the connection...\r\n  };*/\r\n\r\n  createGDXSocket(coinCode) {\r\n    const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n    const newBtcDataSet = { ...oldBtcDataSet };\r\n    newBtcDataSet.data = [];\r\n    newBtcDataSet.label = this.props.location.state.coinCode + \"-USD\";\r\n    const newChartData = {\r\n      ...this.state.lineChartData,\r\n      datasets: [newBtcDataSet],\r\n      labels: [],\r\n    };\r\n    console.log(\r\n      \"Inside GDX Socket Function : \" +\r\n        this.props.location.state.coinCode +\r\n        \"-USD\"\r\n    );\r\n    console.log(\"Check 1\");\r\n    this.setState({ pairing: this.props.location.state.coinCode + \"-USD\" });\r\n    this.setState({ lineChartData: newChartData });\r\n    console.log(\"Check 2\");\r\n    const subscribe = {\r\n      type: \"subscribe\",\r\n      channels: [\r\n        {\r\n          name: \"ticker\",\r\n          product_ids: [this.props.location.state.coinCode + \"-USD\"],\r\n        },\r\n      ],\r\n    };\r\n\r\n    if (this.ws.readyState === 1) {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    }\r\n\r\n    //below code is replaced by a call to sendmessage function\r\n    /*this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n      console.log(\" subscribe send : \" + JSON.stringify(subscribe));\r\n    };\r\n\r\n    this.ws.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n      if (value.type !== \"ticker\") {\r\n        return;\r\n      }\r\n\r\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n      const newBtcDataSet = { ...oldBtcDataSet };\r\n      newBtcDataSet.data.push(value.price);\r\n      const newChartData = {\r\n        ...this.state.lineChartData,\r\n        datasets: [newBtcDataSet],\r\n        labels: this.state.lineChartData.labels.concat(\r\n          new Date().toLocaleTimeString()\r\n        ),\r\n      };\r\n      this.setState({ lineChartData: newChartData });\r\n    };*/\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    let newPairing = this.props.location.state.coinCode + \"-USD\";\r\n    let prevPairing = prevProps.location.state.coinCode + \"-USD\";\r\n    if (newPairing.localeCompare(prevPairing) != 0) {\r\n      //this.forceUpdate();\r\n      console.log(\"New State : \" + newPairing);\r\n      console.log(\"Previous State : \" + prevPairing);\r\n      console.log(\"Component updates\");\r\n      this.createGDXSocket(this.props.location.state.coinCode);\r\n      //this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.ws.close();\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <Card className={classes[\"chart-container\"]}>\r\n        <Chart\r\n          data={this.state.lineChartData}\r\n          options={this.state.lineChartOptions}\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  withStyles(styles, { withTheme: true })\r\n)(CryptoChart);\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\AddCoin.jsx",["165"],"import React, { useState } from \"react\";\r\nimport { Typography, Button, Box, TextField, Card } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { checkCoin } from \"../redux/ducks/CoinDucks\";\r\nimport { setTrigger } from \"../redux/ducks/Trigger\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  blockBox: {\r\n    display: \"block\",\r\n    padding: theme.spacing(2, 2),\r\n  },\r\n  inlineBlockBox: { display: \"inline-block\" },\r\n}));\r\n\r\nexport default function AddCoin() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const [strSymbol, setStrSymbol] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n\r\n  const handleCoinChange = (e) => setStrSymbol(e.target.value);\r\n  const handleTokenChange = (e) => setToken(e.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <Box className={classes.inlineBlockBox}>\r\n        <Card>\r\n          <Typography variant=\"h6\" className={classes.blockBox} align=\"center\">\r\n            Add Coin\r\n          </Typography>\r\n          <Box className={classes.blockBox}>\r\n            <TextField\r\n              id=\"symbol\"\r\n              label=\"Crypto Symbol\"\r\n              variant=\"outlined\"\r\n              onChange={handleCoinChange}\r\n            />\r\n          </Box>\r\n          <Box className={classes.blockBox}>\r\n            <TextField\r\n              id=\"token\"\r\n              label=\"Number of Tokens\"\r\n              variant=\"outlined\"\r\n              onChange={handleTokenChange}\r\n            />\r\n          </Box>\r\n          <Box className={classes.blockBox}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                dispatch(checkCoin(strSymbol, token));\r\n              }}\r\n            >\r\n              Add\r\n            </Button>\r\n          </Box>\r\n        </Card>\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\PortfolioCards.jsx",["166","167","168","169"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport CryptoCard from \"./CryptoCard\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SettingsRemoteSharp } from \"@material-ui/icons\";\r\n\r\nimport TotalPortfolioValue from \"../components/TotalPortfolioValue\";\r\n\r\nexport default function PortfolioCards() {\r\n  // const [totalValue, setTotalValue] = useState(0.0);\r\n  const [items, setItems] = useState([]);\r\n  const coins = useSelector((state) => state.coins.coins);\r\n\r\n  //const reload = useSelector((state) => state.trigger.boolTrigger);\r\n  //const dispatch = useDispatch();\r\n  /*\r\n  var itemsList = [];\r\n    console.log(JSON.stringify(coins));\r\n    for (const [key, value] of Object.entries(coins)) {\r\n      console.log(key, value);\r\n      let eachItem = {\r\n        text: key + \"-USD\",\r\n        onClick: () => {\r\n          return history.push({\r\n            pathname: \"/lightchart\",\r\n            state: { coinCode: key },\r\n          });\r\n        },\r\n      };\r\n      itemsList.push(eachItem);\r\n    }    \r\n    setItems(itemsList);\r\n    dispatch(resetTrigger());    \r\n   */\r\n\r\n  useEffect(() => {\r\n    var itemsList = [];\r\n    for (const [symbol, tokens] of Object.entries(coins)) {\r\n      itemsList.push({\r\n        symbol,\r\n        tokens,\r\n      });\r\n    }\r\n    setItems(itemsList);\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container direction=\"column\" spacing={2}>\r\n      <Grid item>\r\n        <Typography>Your Portfolio</Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <TotalPortfolioValue />\r\n      </Grid>\r\n      <Grid item container>\r\n        <Grid item xs={false} sm={false} md={2} />\r\n        <Grid item xs={12} sm={12} md={8} container spacing={2}>\r\n          {items.map((item, index) => {\r\n            // console.log(\"item : \" + JSON.stringify(item));\r\n            //const { symbol, tokens } = item;\r\n            return (\r\n              <CryptoCard\r\n                key={item[\"symbol\"]}\r\n                symbol={item[\"symbol\"]}\r\n                tokens={item[\"tokens\"]}\r\n              />\r\n            );\r\n          })}\r\n        </Grid>\r\n        <Grid item xs={false} sm={false} md={2} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\BinanceHistoryDataAPI.js",["170","171"],"import axios from \"axios\";\r\n\r\nexport default async function getHistoricalData(symbol) {\r\n  const pairing = symbol + \"USDT\";\r\n\r\n  //https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=1000\r\n  //axios.defaults.headers.common[\"X-Requested-With\"] = \"XMLHttpRequest\";\r\n\r\n  const instance = axios.create({\r\n    baseURL: \"http://localhost:8080\",\r\n  });\r\n\r\n  return instance\r\n    .get(`https://api.binance.com/api/v3/klines`, {\r\n      params: { symbol: pairing, interval: \"1d\", limit: 1000 },\r\n    })\r\n    .then((res) => {\r\n      const cdata = res.data.map((d) => {\r\n        return {\r\n          time: d[0] / 1000,\r\n          value: parseFloat(d[1]),\r\n        };\r\n      });\r\n      //console.log(\"immediatly after fetching from api : \");\r\n      //console.log(cdata);\r\n      return cdata;\r\n    })\r\n    .catch((error) => {\r\n      throw \"Invalid Symbol\";\r\n    });\r\n}\r\n\r\nexport async function getAveragePrice(symbol) {\r\n  const pairing = symbol + \"USDT\";\r\n\r\n  //https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=1000\r\n  //axios.defaults.headers.common[\"X-Requested-With\"] = \"XMLHttpRequest\";\r\n\r\n  const instance = axios.create({\r\n    baseURL: \"http://localhost:8080\",\r\n  });\r\n\r\n  return instance\r\n    .get(`https://api.binance.com/api/v3/avgPrice`, {\r\n      params: { symbol: pairing },\r\n    })\r\n    .then((res) => {\r\n      //console.log(res.data.price);\r\n      return res.data.price;\r\n    })\r\n    .catch((error) => {\r\n      throw \"Invalid Symbol \" + JSON.stringify(error);\r\n    });\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\services\\PortfolioServices.js",["172"],"import axios from \"axios\";\r\nimport PortfolioCards from \"../components/PortfolioCards\";\r\n\r\n//const API_URL = \"http://localhost:8080\";\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst instance = axios.create();\r\n\r\nexport function getPortfolio(username) {\r\n  instance.defaults.withCredentials = true;\r\n  const url = `${API_URL}/portfolio/${username}`;\r\n  return instance\r\n    .get(url)\r\n    .then((response) => response.data)\r\n    .catch((err) =>\r\n      console.log(\"Get User details didnt work\" + JSON.stringify(err))\r\n    );\r\n}\r\n\r\nexport function addCoinToDb(coinInfo) {\r\n  instance.defaults.withCredentials = true;\r\n  const url = `${API_URL}/coins/add`;\r\n  let payload = {\r\n    coin: coinInfo.coin,\r\n    tokens: coinInfo.tokens,\r\n    username: coinInfo.username,\r\n  };\r\n\r\n  return instance\r\n    .post(url, payload)\r\n    .then((response) => response.status === 200)\r\n    .catch((err) => console.log(\"Add Coin Database : \" + JSON.stringify(err)));\r\n}\r\n\r\nexport function removeCoinFromDb(coinInfo) {\r\n  instance.defaults.withCredentials = true;\r\n  const url = `${API_URL}/coins/remove`;\r\n  let payload = {\r\n    coin: coinInfo.coin,\r\n    username: coinInfo.username,\r\n  };\r\n\r\n  return instance\r\n    .post(url, payload)\r\n    .then((response) => response.status === 200)\r\n    .catch((err) =>\r\n      console.log(\"Remove Coin from Database : \" + JSON.stringify(err))\r\n    );\r\n}\r\n\r\nexport function checkUsernameExist(username) {\r\n  const url = `${API_URL}/portfolio/checkusername`;\r\n  let payload = {\r\n    username,\r\n  };\r\n  return instance\r\n    .post(url, payload)\r\n    .then((res) => res.status === 200)\r\n    .catch((res) => false);\r\n}\r\n\r\nexport function createUser(values) {\r\n  const url = `${API_URL}/portfolio/create`;\r\n  console.log(JSON.stringify(values));\r\n  return instance\r\n    .post(url, values)\r\n    .then((res) => {\r\n      return res.status === 200;\r\n    })\r\n    .catch((res) => {\r\n      console.log(\"Response in Portfolio : \" + JSON.stringify(res));\r\n      return false;\r\n    });\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\sagas\\requests\\Authentication.js",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\Chart.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\CryptoCard.jsx",[],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\Trigger.js",["173"],"//export const CHECK_COIN = \"CHECK_COIN\";\r\nconst SET_TRUE = \"SET_TRUE\";\r\nconst SET_FALSE = \"SET_FALSE\";\r\n\r\nconst initialState = {\r\n  boolTrigger: false,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_TRUE:\r\n      return {\r\n        boolTrigger: true,\r\n      };\r\n    case SET_FALSE:\r\n      return {\r\n        boolTrigger: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setTrigger = () => ({\r\n  type: SET_TRUE,\r\n});\r\n\r\nexport const resetTrigger = () => ({\r\n  type: SET_FALSE,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\redux\\ducks\\TotalValueDucks.js",["174","175"],"const ADD_VALUE = \"ADD_VALUE\";\r\nconst REMOVE_VALUE = \"REMOVE_VALUE\";\r\nconst RESET_VALUES = \"RESET_VALUES\";\r\n\r\nconst intialState = {\r\n  coins: {},\r\n};\r\n\r\nexport default (state = intialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_VALUE:\r\n      let { symbol, totValue } = action;\r\n      //console.log(\"ADD COIN Reducer \" + symbol + \" \" + token);\r\n      //const newMap = state.coins.set(symbol, token);\r\n      var newState = {\r\n        coins: { ...state.coins },\r\n      };\r\n      newState.coins[symbol] = totValue;\r\n      return newState;\r\n    case REMOVE_VALUE:\r\n      delete state.coins[action.symbol];\r\n      var newState = {\r\n        coins: { ...state.coins },\r\n      };\r\n      return newState;\r\n    case RESET_VALUES:\r\n      return intialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const addValue = (symbol, totValue) => ({\r\n  type: ADD_VALUE,\r\n  symbol,\r\n  totValue,\r\n});\r\n\r\nexport const removeValue = (symbol) => ({\r\n  type: REMOVE_VALUE,\r\n  symbol,\r\n});\r\n\r\nexport const resetValues = () => ({\r\n  type: RESET_VALUES,\r\n});\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\TotalPortfolioValue.jsx",["176"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\RealTimeChart.jsx",["177","178","179","180","181","182","183","184","185"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { createChart, line } from \"lightweight-charts\";\r\nimport { useDispatch } from \"react-redux\";\r\n//import PropTypes from \"prop-types\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport getHistoricalData from \"./../services/BinanceHistoryDataAPI\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n  Grid,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { getAveragePrice } from \"../services/BinanceHistoryDataAPI\";\r\nimport { removeCoinReq } from \"../redux/ducks/CoinDucks\";\r\n\r\nconst HEIGHT = 600;\r\n\r\nlet chart;\r\nlet candlestickSeries;\r\n\r\nexport default function RealTimeChart() {\r\n  const chartRef = React.useRef();\r\n  const legendRef = React.useRef();\r\n  const location = useLocation();\r\n  var previousTime = 0.0;\r\n\r\n  // const legend = \"Legend test\";\r\n  const symbol = location.state.coinCode;\r\n  const legend = symbol + \"-USDT\";\r\n  const tokens = location.state.tokens;\r\n  const decimals = 0.0;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [rate, setRate] = useState(0.0);\r\n\r\n  const [lineSeries, setLineSeries] = useState([\r\n    {\r\n      data: [],\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    chart = createChart(chartRef.current, {\r\n      width: chartRef.current.offsetWidth,\r\n      height: HEIGHT,\r\n      alignLabels: true,\r\n      timeScale: {\r\n        rightOffset: 0,\r\n        barSpacing: 15,\r\n        fixLeftEdge: false,\r\n        lockVisibleTimeRangeOnResize: false,\r\n        rightBarStaysOnScroll: true,\r\n        borderVisible: false,\r\n        borderColor: \"#fff000\",\r\n        visible: true,\r\n        timeVisible: true,\r\n        secondsVisible: false,\r\n        shiftVisibleRangeOnNewBar: true,\r\n        autoScale: true,\r\n      },\r\n      rightPriceScale: {\r\n        scaleMargins: {\r\n          top: 0.3,\r\n          bottom: 0.25,\r\n        },\r\n        borderVisible: false,\r\n      },\r\n      priceScale: {\r\n        autoScale: true,\r\n      },\r\n      /*watermark: {\r\n        color: \"rgba(0, 0, 0, 0.7)\",\r\n        visible: true,\r\n        text: \"TxQuick\",\r\n        fontSize: 18,\r\n        horzAlign: \"left\",\r\n        vertAlign: \"bottom\",\r\n      },*/\r\n    });\r\n\r\n    candlestickSeries = chart.addLineSeries();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    ////////////////////////////////////////\r\n    getHistoricalData(location.state.coinCode)\r\n      .then((incD) => {\r\n        //console.log(\"received by the component : \" + JSON.stringify(incD));\r\n        //setIncomingData(incD);\r\n        // const oldLineData = lineSeries[0][\"data\"];\r\n        // const newLineSeries = [\r\n        //   {\r\n        //     data: [...oldLineData, ...incD],\r\n        //   },\r\n        // ];\r\n        //setLineSeries(newLineSeries);\r\n        console.log(JSON.stringify(incD));\r\n        candlestickSeries.setData(incD);\r\n        //console.log(\"received by the component : \");\r\n        //console.log(newLineSeries);\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n    ////////////////////////////////////////\r\n  }, [location.state.coinCode]);\r\n\r\n  //   React.useEffect(() => {\r\n  //     candlestickSeries.update(lastCandle);\r\n  //   }, [lastCandle]);\r\n\r\n  ////////////////below code is for websocket\r\n  const API_WS =\r\n    \"wss://stream.binance.com:9443/ws/\" +\r\n    location.state.coinCode.toLowerCase() +\r\n    \"usdt@ticker\";\r\n  var conn = new WebSocket(API_WS);\r\n  useEffect(() => {\r\n    // console.log(conn);\r\n    // console.log(JSON.stringify(location.state.coinCode));\r\n    conn.onmessage = (e) => {\r\n      // console.log(\"value : \");\r\n      // console.log(e);\r\n      var newKlineMap = JSON.parse(e.data);\r\n      const newPoint = {\r\n        time: newKlineMap.E / 1000,\r\n        value: parseFloat(newKlineMap.c),\r\n      };\r\n\r\n      // console.log(newKlineMap.k.t + \" \" + newKlineMap.k.o);\r\n      console.log(\"Value : \" + JSON.stringify(newPoint));\r\n      candlestickSeries.update(newPoint);\r\n      setRate(parseFloat(newKlineMap.c));\r\n      // chart.timeScale().fitContent();\r\n      // if (previousTime <= newPoint.time) {\r\n      //   console.log(\"Time Update : \" + previousTime);\r\n      //   candlestickSeries.update(newPoint);\r\n      //   previousTime = newPoint.time;\r\n      // }\r\n    };\r\n    return () => {\r\n      conn.close();\r\n    };\r\n  });\r\n\r\n  /////////////////////////////////////\r\n\r\n  // useInterval(() => {\r\n  //   // console.log(\"Interval running in the background \" + JSON.stringify(symbol));\r\n  //   getAveragePrice(symbol)\r\n  //     .then((res) => {\r\n  //       setRate(parseFloat(res));\r\n  //     })\r\n  //     .catch((err) => console.log(err));\r\n  // }, 1000);\r\n\r\n  ///////////////////////////////////////////\r\n\r\n  React.useEffect(() => {\r\n    const handler = () => {\r\n      chart.resize(chartRef.current.offsetWidth, HEIGHT);\r\n    };\r\n    window.addEventListener(\"resize\", handler);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handler);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Card>\r\n      <Grid container>\r\n        <Grid item container justify=\"center\">\r\n          <Grid>\r\n            <Typography>{legend}</Typography>{\" \"}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container justify=\"space-around\">\r\n          <Typography>\r\n            Rate :{\" \"}\r\n            {rate.toLocaleString(\"en-US\", {\r\n              style: \"currency\",\r\n              currency: \"USD\",\r\n            })}\r\n          </Typography>\r\n          <Typography>Tokens : {tokens} </Typography>\r\n          <Typography>\r\n            Value :{\" \"}\r\n            {(parseFloat(rate) * parseFloat(tokens)).toLocaleString(\"en-US\", {\r\n              style: \"currency\",\r\n              currency: \"USD\",\r\n            })}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item container>\r\n          <div\r\n            ref={chartRef}\r\n            id=\"chart\"\r\n            style={{ position: \"relative\", width: \"100%\" }}\r\n          >\r\n            <div\r\n              ref={legendRef}\r\n              style={{\r\n                position: \"absolute\",\r\n                zIndex: 2,\r\n                color: \"#333\",\r\n                padding: 10,\r\n              }}\r\n            >\r\n              {legend}\r\n            </div>\r\n          </div>\r\n        </Grid>\r\n        <Grid item container justify=\"flex-end\">\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => dispatch(removeCoinReq(symbol))}\r\n          >\r\n            Remove Coin\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest function.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\n// CandleChart.propTypes = {\r\n//   legend: PropTypes.string,\r\n//   initCandles: PropTypes.array,\r\n//   lastCandle: PropTypes.object,\r\n//   decimals: PropTypes.number,\r\n// };\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\pages\\Registration.jsx",["186","187"],"import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  FormGroup,\r\n  Typography,\r\n  TextField,\r\n  makeStyles,\r\n  MenuItem,\r\n  Box,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { ErrorMessage, Form, Formik, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { createUser, checkUsernameExist } from \"../services/PortfolioServices\";\r\nimport { setSnackbar } from \"../redux/ducks/Snackbar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst initialValues = {\r\n  name: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n  passwordConfirmation: \"\",\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  regPaper: {\r\n    width: \"400px\",\r\n    align: \"center\",\r\n    display: \"block\",\r\n    align: \"center\",\r\n    padding: theme.spacing(2, 2),\r\n    margin: theme.spacing(8, 2),\r\n  },\r\n}));\r\n\r\nexport default function Registration() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div align=\"center\">\r\n      <Card className={classes.regPaper}>\r\n        <CardContent>\r\n          <Typography variant=\"h4\">New User Account Creation</Typography>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={Yup.object().shape({\r\n              name: Yup.string()\r\n                .required()\r\n                .min(6, \"Name needs to be atleast 6 character long\")\r\n                .max(50, \"Name cannot be more than 50 characters long4\"),\r\n              username: Yup.string()\r\n                .required(\"User Name is required\")\r\n                .test(\r\n                  \"username\",\r\n                  \"Username Exists already\",\r\n                  (value, context) => {\r\n                    //console.log(UserService.checkUsernameExist(value).then((response)=> Boolean(response) ));\r\n                    //return !( value === 'user1');\r\n                    let returnvalue = checkUsernameExist(value);\r\n                    console.log(JSON.stringify(returnvalue));\r\n                    return returnvalue;\r\n                  }\r\n                )\r\n                .min(6, \"Username must be at least 6 characters\")\r\n                .max(50, \"Username must be less 50 characters\"),\r\n              password: Yup.string()\r\n                .min(8, \"Password must be at least 8 characters\")\r\n                .max(50, \"Password must be less than 50 characters\")\r\n                .matches(\r\n                  /^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/,\r\n                  \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"\r\n                )\r\n                .required(\"Password is required\"),\r\n              passwordConfirmation: Yup.string()\r\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n                .required(\"Confirm Password is required\"),\r\n            })}\r\n            onSubmit={(values, formikHelpers) => {\r\n              createUser(values)\r\n                .then((response) => {\r\n                  console.log(JSON.stringify(response));\r\n                  dispatch(\r\n                    setSnackbar(true, \"success\", \"User Registration Successful\")\r\n                  );\r\n                  history.push(\"/login\");\r\n                })\r\n                .catch(\r\n                  dispatch(\r\n                    setSnackbar(true, \"error\", \"User Registration Failed\")\r\n                  )\r\n                );\r\n            }}\r\n          >\r\n            {({ values, errors, isSubmitting, isValidating }) => (\r\n              <Form>\r\n                <Box marginBottom={2}>\r\n                  <FormGroup>\r\n                    <Field\r\n                      required\r\n                      name=\"name\"\r\n                      type=\"string\"\r\n                      as={TextField}\r\n                      label=\"Full Name\"\r\n                    />\r\n                    <ErrorMessage name=\"name\" />\r\n                  </FormGroup>\r\n                </Box>\r\n                <Box marginBottom={2}>\r\n                  <FormGroup>\r\n                    <Field\r\n                      required\r\n                      name=\"username\"\r\n                      type=\"string\"\r\n                      as={TextField}\r\n                      label=\"User Name\"\r\n                    />\r\n                    <ErrorMessage name=\"username\" />\r\n                  </FormGroup>\r\n                </Box>\r\n                <Box marginBottom={2}>\r\n                  <FormGroup>\r\n                    <Field\r\n                      required\r\n                      id=\"password\"\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      as={TextField}\r\n                      type=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                    />\r\n                    <ErrorMessage name=\"password\" />\r\n                  </FormGroup>\r\n                </Box>\r\n                <Box marginBottom={2}>\r\n                  <FormGroup>\r\n                    <Field\r\n                      required\r\n                      id=\"passwordConfirmation\"\r\n                      name=\"passwordConfirmation\"\r\n                      label=\"Confirm Password\"\r\n                      as={TextField}\r\n                      type=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                    />\r\n                    <ErrorMessage name=\"passwordConfirmation\" />\r\n                  </FormGroup>\r\n                </Box>\r\n                <Box marginBottom={2}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting || isValidating}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Box>\r\n                <Box marginBottom={2}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    type=\"reset\"\r\n                    disabled={isSubmitting || isValidating}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                </Box>\r\n                {/*<pre>{JSON.stringify(errors, null, 4)}</pre>\r\n                <pre>{JSON.stringify(values, null, 4)}</pre>*/}\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\IdleTimerComponent.jsx",["188","189"],"C:\\dev\\workspace\\crypto-portfolio\\crypto-portfolio\\src\\components\\IdleTimerDialog.jsx",["190","191","192","193"],{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":19,"column":9,"nodeType":"200","messageId":"201","endLine":19,"endColumn":16},{"ruleId":"202","severity":1,"message":"203","line":32,"column":1,"nodeType":"204","endLine":40,"endColumn":3},{"ruleId":"202","severity":1,"message":"203","line":9,"column":1,"nodeType":"204","endLine":30,"endColumn":3},{"ruleId":"202","severity":1,"message":"203","line":11,"column":1,"nodeType":"204","endLine":33,"endColumn":3},{"ruleId":"205","severity":1,"message":"206","line":24,"column":11,"nodeType":"200","messageId":"207","endLine":24,"endColumn":19},{"ruleId":"198","severity":1,"message":"208","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":26},{"ruleId":"198","severity":1,"message":"209","line":6,"column":3,"nodeType":"200","messageId":"201","endLine":6,"endColumn":7},{"ruleId":"198","severity":1,"message":"210","line":7,"column":3,"nodeType":"200","messageId":"201","endLine":7,"endColumn":14},{"ruleId":"198","severity":1,"message":"211","line":8,"column":3,"nodeType":"200","messageId":"201","endLine":8,"endColumn":12},{"ruleId":"198","severity":1,"message":"212","line":12,"column":3,"nodeType":"200","messageId":"201","endLine":12,"endColumn":11},{"ruleId":"213","severity":1,"message":"214","line":47,"column":22,"nodeType":"215","endLine":47,"endColumn":26},{"ruleId":"198","severity":1,"message":"216","line":3,"column":8,"nodeType":"200","messageId":"201","endLine":3,"endColumn":12},{"ruleId":"198","severity":1,"message":"217","line":6,"column":3,"nodeType":"200","messageId":"201","endLine":6,"endColumn":13},{"ruleId":"198","severity":1,"message":"218","line":118,"column":9,"nodeType":"200","messageId":"201","endLine":118,"endColumn":17},{"ruleId":"213","severity":1,"message":"219","line":143,"column":6,"nodeType":"220","endLine":143,"endColumn":14,"suggestions":"221"},{"ruleId":"198","severity":1,"message":"222","line":145,"column":9,"nodeType":"200","messageId":"201","endLine":145,"endColumn":21},{"ruleId":"223","severity":1,"message":"224","line":20,"column":7,"nodeType":"225","messageId":"226","endLine":20,"endColumn":34},{"ruleId":"198","severity":1,"message":"227","line":8,"column":26,"nodeType":"200","messageId":"201","endLine":8,"endColumn":33},{"ruleId":"198","severity":1,"message":"228","line":9,"column":8,"nodeType":"200","messageId":"201","endLine":9,"endColumn":13},{"ruleId":"198","severity":1,"message":"218","line":47,"column":9,"nodeType":"200","messageId":"201","endLine":47,"endColumn":17},{"ruleId":"213","severity":1,"message":"229","line":105,"column":6,"nodeType":"220","endLine":105,"endColumn":31,"suggestions":"230"},{"ruleId":"194","replacedBy":"231"},{"ruleId":"196","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":244,"column":47,"nodeType":"235","messageId":"236","endLine":244,"endColumn":49},{"ruleId":"198","severity":1,"message":"237","line":6,"column":10,"nodeType":"200","messageId":"201","endLine":6,"endColumn":20},{"ruleId":"198","severity":1,"message":"238","line":1,"column":38,"nodeType":"200","messageId":"201","endLine":1,"endColumn":44},{"ruleId":"198","severity":1,"message":"239","line":4,"column":10,"nodeType":"200","messageId":"201","endLine":4,"endColumn":21},{"ruleId":"198","severity":1,"message":"240","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":29},{"ruleId":"213","severity":1,"message":"241","line":45,"column":6,"nodeType":"220","endLine":45,"endColumn":8,"suggestions":"242"},{"ruleId":"223","severity":1,"message":"224","line":29,"column":7,"nodeType":"225","messageId":"226","endLine":29,"endColumn":30},{"ruleId":"223","severity":1,"message":"224","line":52,"column":7,"nodeType":"225","messageId":"226","endLine":52,"endColumn":55},{"ruleId":"198","severity":1,"message":"243","line":2,"column":8,"nodeType":"200","messageId":"201","endLine":2,"endColumn":22},{"ruleId":"202","severity":1,"message":"203","line":9,"column":1,"nodeType":"204","endLine":22,"endColumn":3},{"ruleId":"202","severity":1,"message":"203","line":9,"column":1,"nodeType":"204","endLine":31,"endColumn":3},{"ruleId":"205","severity":1,"message":"206","line":22,"column":11,"nodeType":"200","messageId":"207","endLine":22,"endColumn":19},{"ruleId":"213","severity":1,"message":"244","line":28,"column":6,"nodeType":"220","endLine":28,"endColumn":14,"suggestions":"245"},{"ruleId":"198","severity":1,"message":"246","line":2,"column":23,"nodeType":"200","messageId":"201","endLine":2,"endColumn":27},{"ruleId":"198","severity":1,"message":"210","line":9,"column":3,"nodeType":"200","messageId":"201","endLine":9,"endColumn":14},{"ruleId":"198","severity":1,"message":"247","line":10,"column":3,"nodeType":"200","messageId":"201","endLine":10,"endColumn":13},{"ruleId":"198","severity":1,"message":"248","line":15,"column":10,"nodeType":"200","messageId":"201","endLine":15,"endColumn":25},{"ruleId":"198","severity":1,"message":"249","line":27,"column":7,"nodeType":"200","messageId":"201","endLine":27,"endColumn":19},{"ruleId":"198","severity":1,"message":"250","line":33,"column":9,"nodeType":"200","messageId":"201","endLine":33,"endColumn":17},{"ruleId":"198","severity":1,"message":"251","line":39,"column":10,"nodeType":"200","messageId":"201","endLine":39,"endColumn":20},{"ruleId":"198","severity":1,"message":"252","line":39,"column":22,"nodeType":"200","messageId":"201","endLine":39,"endColumn":35},{"ruleId":"198","severity":1,"message":"253","line":230,"column":10,"nodeType":"200","messageId":"201","endLine":230,"endColumn":21},{"ruleId":"198","severity":1,"message":"212","line":9,"column":3,"nodeType":"200","messageId":"201","endLine":9,"endColumn":11},{"ruleId":"254","severity":1,"message":"255","line":32,"column":5,"nodeType":"256","messageId":"236","endLine":32,"endColumn":10},{"ruleId":"254","severity":1,"message":"257","line":20,"column":5,"nodeType":"256","messageId":"236","endLine":20,"endColumn":20},{"ruleId":"198","severity":1,"message":"258","line":26,"column":10,"nodeType":"200","messageId":"201","endLine":26,"endColumn":20},{"ruleId":"198","severity":1,"message":"259","line":1,"column":10,"nodeType":"200","messageId":"201","endLine":1,"endColumn":37},{"ruleId":"198","severity":1,"message":"260","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":20},{"ruleId":"198","severity":1,"message":"261","line":23,"column":9,"nodeType":"200","messageId":"201","endLine":23,"endColumn":19},{"ruleId":"198","severity":1,"message":"218","line":24,"column":9,"nodeType":"200","messageId":"201","endLine":24,"endColumn":17},"no-native-reassign",["262"],"no-negated-in-lhs",["263"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-redeclare","'newState' is already defined.","redeclared","'Component' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'FormGroup' is defined but never used.","'MenuItem' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'errorVisible' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'clsx' is defined but never used.","'IconButton' is defined but never used.","'username' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'coins', 'dispatch', and 'history'. Either include them or remove the dependency array.","ArrayExpression",["264"],"'handleLogout' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'refresh' is defined but never used.","'store' is defined but never used.","React Hook useEffect has a missing dependency: 'lineSeries'. Either include it or remove the dependency array.",["265"],["262"],["263"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setTrigger' is defined but never used.","'useRef' is defined but never used.","'useDispatch' is defined but never used.","'SettingsRemoteSharp' is defined but never used.","React Hook useEffect has a missing dependency: 'coins'. Either include it or remove the dependency array.",["266"],"'PortfolioCards' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'noOfCoins', and 'totValues'. Either include them or remove the dependency array. You can also do a functional update 'setNoOfCoins(n => ...)' if you only need 'noOfCoins' in the 'setNoOfCoins' call.",["267"],"'line' is defined but never used.","'CardHeader' is defined but never used.","'getAveragePrice' is defined but never used.","'previousTime' is assigned a value but never used.","'decimals' is assigned a value but never used.","'lineSeries' is assigned a value but never used.","'setLineSeries' is assigned a value but never used.","'useInterval' is defined but never used.","no-dupe-keys","Duplicate key 'align'.","ObjectExpression","Duplicate key 'backgroundColor'.","'isLoggedIn' is assigned a value but never used.","'SettingsApplicationsRounded' is defined but never used.","'makeStyles' is defined but never used.","'nameofUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},"Update the dependencies array to be: [coins, dispatch, history, reload]",{"range":"276","text":"277"},"Update the dependencies array to be: [lineSeries, location.state.coinCode]",{"range":"278","text":"279"},"Update the dependencies array to be: [coins]",{"range":"280","text":"281"},"Update the dependencies array to be: [dispatch, noOfCoins, reload, totValues]",{"range":"282","text":"283"},[3754,3762],"[coins, dispatch, history, reload]",[2609,2634],"[lineSeries, location.state.coinCode]",[1373,1375],"[coins]",[1055,1063],"[dispatch, noOfCoins, reload, totValues]"]